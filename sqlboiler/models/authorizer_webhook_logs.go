// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerWebhookLog is an object representing the database table.
type AuthorizerWebhookLog struct {
	Key        null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	HTTPStatus null.Int64  `boil:"http_status" json:"http_status,omitempty" toml:"http_status" yaml:"http_status,omitempty"`
	Response   null.String `boil:"response" json:"response,omitempty" toml:"response" yaml:"response,omitempty"`
	Request    null.String `boil:"request" json:"request,omitempty" toml:"request" yaml:"request,omitempty"`
	WebhookID  null.String `boil:"webhook_id" json:"webhook_id,omitempty" toml:"webhook_id" yaml:"webhook_id,omitempty"`
	CreatedAt  null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerWebhookLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerWebhookLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerWebhookLogColumns = struct {
	Key        string
	ID         string
	HTTPStatus string
	Response   string
	Request    string
	WebhookID  string
	CreatedAt  string
	UpdatedAt  string
}{
	Key:        "key",
	ID:         "id",
	HTTPStatus: "http_status",
	Response:   "response",
	Request:    "request",
	WebhookID:  "webhook_id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var AuthorizerWebhookLogTableColumns = struct {
	Key        string
	ID         string
	HTTPStatus string
	Response   string
	Request    string
	WebhookID  string
	CreatedAt  string
	UpdatedAt  string
}{
	Key:        "authorizer_webhook_logs.key",
	ID:         "authorizer_webhook_logs.id",
	HTTPStatus: "authorizer_webhook_logs.http_status",
	Response:   "authorizer_webhook_logs.response",
	Request:    "authorizer_webhook_logs.request",
	WebhookID:  "authorizer_webhook_logs.webhook_id",
	CreatedAt:  "authorizer_webhook_logs.created_at",
	UpdatedAt:  "authorizer_webhook_logs.updated_at",
}

// Generated where

var AuthorizerWebhookLogWhere = struct {
	Key        whereHelpernull_String
	ID         whereHelperstring
	HTTPStatus whereHelpernull_Int64
	Response   whereHelpernull_String
	Request    whereHelpernull_String
	WebhookID  whereHelpernull_String
	CreatedAt  whereHelpernull_Int64
	UpdatedAt  whereHelpernull_Int64
}{
	Key:        whereHelpernull_String{field: "\"authorizer_webhook_logs\".\"key\""},
	ID:         whereHelperstring{field: "\"authorizer_webhook_logs\".\"id\""},
	HTTPStatus: whereHelpernull_Int64{field: "\"authorizer_webhook_logs\".\"http_status\""},
	Response:   whereHelpernull_String{field: "\"authorizer_webhook_logs\".\"response\""},
	Request:    whereHelpernull_String{field: "\"authorizer_webhook_logs\".\"request\""},
	WebhookID:  whereHelpernull_String{field: "\"authorizer_webhook_logs\".\"webhook_id\""},
	CreatedAt:  whereHelpernull_Int64{field: "\"authorizer_webhook_logs\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Int64{field: "\"authorizer_webhook_logs\".\"updated_at\""},
}

// AuthorizerWebhookLogRels is where relationship names are stored.
var AuthorizerWebhookLogRels = struct {
}{}

// authorizerWebhookLogR is where relationships are stored.
type authorizerWebhookLogR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerWebhookLogR) NewStruct() *authorizerWebhookLogR {
	return &authorizerWebhookLogR{}
}

// authorizerWebhookLogL is where Load methods for each relationship are stored.
type authorizerWebhookLogL struct{}

var (
	authorizerWebhookLogAllColumns            = []string{"key", "id", "http_status", "response", "request", "webhook_id", "created_at", "updated_at"}
	authorizerWebhookLogColumnsWithoutDefault = []string{"id"}
	authorizerWebhookLogColumnsWithDefault    = []string{"key", "http_status", "response", "request", "webhook_id", "created_at", "updated_at"}
	authorizerWebhookLogPrimaryKeyColumns     = []string{"id"}
	authorizerWebhookLogGeneratedColumns      = []string{}
)

type (
	// AuthorizerWebhookLogSlice is an alias for a slice of pointers to AuthorizerWebhookLog.
	// This should almost always be used instead of []AuthorizerWebhookLog.
	AuthorizerWebhookLogSlice []*AuthorizerWebhookLog
	// AuthorizerWebhookLogHook is the signature for custom AuthorizerWebhookLog hook methods
	AuthorizerWebhookLogHook func(context.Context, boil.ContextExecutor, *AuthorizerWebhookLog) error

	authorizerWebhookLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerWebhookLogType                 = reflect.TypeOf(&AuthorizerWebhookLog{})
	authorizerWebhookLogMapping              = queries.MakeStructMapping(authorizerWebhookLogType)
	authorizerWebhookLogPrimaryKeyMapping, _ = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, authorizerWebhookLogPrimaryKeyColumns)
	authorizerWebhookLogInsertCacheMut       sync.RWMutex
	authorizerWebhookLogInsertCache          = make(map[string]insertCache)
	authorizerWebhookLogUpdateCacheMut       sync.RWMutex
	authorizerWebhookLogUpdateCache          = make(map[string]updateCache)
	authorizerWebhookLogUpsertCacheMut       sync.RWMutex
	authorizerWebhookLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerWebhookLogAfterSelectHooks []AuthorizerWebhookLogHook

var authorizerWebhookLogBeforeInsertHooks []AuthorizerWebhookLogHook
var authorizerWebhookLogAfterInsertHooks []AuthorizerWebhookLogHook

var authorizerWebhookLogBeforeUpdateHooks []AuthorizerWebhookLogHook
var authorizerWebhookLogAfterUpdateHooks []AuthorizerWebhookLogHook

var authorizerWebhookLogBeforeDeleteHooks []AuthorizerWebhookLogHook
var authorizerWebhookLogAfterDeleteHooks []AuthorizerWebhookLogHook

var authorizerWebhookLogBeforeUpsertHooks []AuthorizerWebhookLogHook
var authorizerWebhookLogAfterUpsertHooks []AuthorizerWebhookLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerWebhookLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerWebhookLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerWebhookLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerWebhookLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerWebhookLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerWebhookLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerWebhookLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerWebhookLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerWebhookLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerWebhookLogHook registers your hook function for all future operations.
func AddAuthorizerWebhookLogHook(hookPoint boil.HookPoint, authorizerWebhookLogHook AuthorizerWebhookLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerWebhookLogAfterSelectHooks = append(authorizerWebhookLogAfterSelectHooks, authorizerWebhookLogHook)
	case boil.BeforeInsertHook:
		authorizerWebhookLogBeforeInsertHooks = append(authorizerWebhookLogBeforeInsertHooks, authorizerWebhookLogHook)
	case boil.AfterInsertHook:
		authorizerWebhookLogAfterInsertHooks = append(authorizerWebhookLogAfterInsertHooks, authorizerWebhookLogHook)
	case boil.BeforeUpdateHook:
		authorizerWebhookLogBeforeUpdateHooks = append(authorizerWebhookLogBeforeUpdateHooks, authorizerWebhookLogHook)
	case boil.AfterUpdateHook:
		authorizerWebhookLogAfterUpdateHooks = append(authorizerWebhookLogAfterUpdateHooks, authorizerWebhookLogHook)
	case boil.BeforeDeleteHook:
		authorizerWebhookLogBeforeDeleteHooks = append(authorizerWebhookLogBeforeDeleteHooks, authorizerWebhookLogHook)
	case boil.AfterDeleteHook:
		authorizerWebhookLogAfterDeleteHooks = append(authorizerWebhookLogAfterDeleteHooks, authorizerWebhookLogHook)
	case boil.BeforeUpsertHook:
		authorizerWebhookLogBeforeUpsertHooks = append(authorizerWebhookLogBeforeUpsertHooks, authorizerWebhookLogHook)
	case boil.AfterUpsertHook:
		authorizerWebhookLogAfterUpsertHooks = append(authorizerWebhookLogAfterUpsertHooks, authorizerWebhookLogHook)
	}
}

// OneG returns a single authorizerWebhookLog record from the query using the global executor.
func (q authorizerWebhookLogQuery) OneG(ctx context.Context) (*AuthorizerWebhookLog, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerWebhookLog record from the query.
func (q authorizerWebhookLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerWebhookLog, error) {
	o := &AuthorizerWebhookLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_webhook_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerWebhookLog records from the query using the global executor.
func (q authorizerWebhookLogQuery) AllG(ctx context.Context) (AuthorizerWebhookLogSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerWebhookLog records from the query.
func (q authorizerWebhookLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerWebhookLogSlice, error) {
	var o []*AuthorizerWebhookLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerWebhookLog slice")
	}

	if len(authorizerWebhookLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerWebhookLog records in the query using the global executor
func (q authorizerWebhookLogQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerWebhookLog records in the query.
func (q authorizerWebhookLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_webhook_logs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerWebhookLogQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerWebhookLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_webhook_logs exists")
	}

	return count > 0, nil
}

// AuthorizerWebhookLogs retrieves all the records using an executor.
func AuthorizerWebhookLogs(mods ...qm.QueryMod) authorizerWebhookLogQuery {
	mods = append(mods, qm.From("\"authorizer_webhook_logs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_webhook_logs\".*"})
	}

	return authorizerWebhookLogQuery{q}
}

// FindAuthorizerWebhookLogG retrieves a single record by ID.
func FindAuthorizerWebhookLogG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerWebhookLog, error) {
	return FindAuthorizerWebhookLog(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerWebhookLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerWebhookLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerWebhookLog, error) {
	authorizerWebhookLogObj := &AuthorizerWebhookLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_webhook_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerWebhookLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_webhook_logs")
	}

	if err = authorizerWebhookLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerWebhookLogObj, err
	}

	return authorizerWebhookLogObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerWebhookLog) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerWebhookLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_webhook_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerWebhookLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerWebhookLogInsertCacheMut.RLock()
	cache, cached := authorizerWebhookLogInsertCache[key]
	authorizerWebhookLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerWebhookLogAllColumns,
			authorizerWebhookLogColumnsWithDefault,
			authorizerWebhookLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_webhook_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_webhook_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_webhook_logs")
	}

	if !cached {
		authorizerWebhookLogInsertCacheMut.Lock()
		authorizerWebhookLogInsertCache[key] = cache
		authorizerWebhookLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerWebhookLog record using the global executor.
// See Update for more documentation.
func (o *AuthorizerWebhookLog) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerWebhookLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerWebhookLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerWebhookLogUpdateCacheMut.RLock()
	cache, cached := authorizerWebhookLogUpdateCache[key]
	authorizerWebhookLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerWebhookLogAllColumns,
			authorizerWebhookLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_webhook_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_webhook_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerWebhookLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, append(wl, authorizerWebhookLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_webhook_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_webhook_logs")
	}

	if !cached {
		authorizerWebhookLogUpdateCacheMut.Lock()
		authorizerWebhookLogUpdateCache[key] = cache
		authorizerWebhookLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerWebhookLogQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerWebhookLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_webhook_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_webhook_logs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerWebhookLogSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerWebhookLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_webhook_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerWebhookLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerWebhookLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerWebhookLog")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerWebhookLog) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerWebhookLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_webhook_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerWebhookLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerWebhookLogUpsertCacheMut.RLock()
	cache, cached := authorizerWebhookLogUpsertCache[key]
	authorizerWebhookLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerWebhookLogAllColumns,
			authorizerWebhookLogColumnsWithDefault,
			authorizerWebhookLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerWebhookLogAllColumns,
			authorizerWebhookLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_webhook_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerWebhookLogPrimaryKeyColumns))
			copy(conflict, authorizerWebhookLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_webhook_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerWebhookLogType, authorizerWebhookLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_webhook_logs")
	}

	if !cached {
		authorizerWebhookLogUpsertCacheMut.Lock()
		authorizerWebhookLogUpsertCache[key] = cache
		authorizerWebhookLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerWebhookLog record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerWebhookLog) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerWebhookLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerWebhookLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerWebhookLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerWebhookLogPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_webhook_logs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_webhook_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_webhook_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerWebhookLogQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerWebhookLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerWebhookLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_webhook_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_webhook_logs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerWebhookLogSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerWebhookLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerWebhookLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_webhook_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerWebhookLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerWebhookLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_webhook_logs")
	}

	if len(authorizerWebhookLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerWebhookLog) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerWebhookLog provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerWebhookLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerWebhookLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerWebhookLogSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerWebhookLogSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerWebhookLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerWebhookLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_webhook_logs\".* FROM \"authorizer_webhook_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerWebhookLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerWebhookLogSlice")
	}

	*o = slice

	return nil
}

// AuthorizerWebhookLogExistsG checks if the AuthorizerWebhookLog row exists.
func AuthorizerWebhookLogExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerWebhookLogExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerWebhookLogExists checks if the AuthorizerWebhookLog row exists.
func AuthorizerWebhookLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_webhook_logs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_webhook_logs exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerWebhookLog row exists.
func (o *AuthorizerWebhookLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerWebhookLogExists(ctx, exec, o.ID)
}
