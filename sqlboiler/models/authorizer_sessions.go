// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerSession is an object representing the database table.
type AuthorizerSession struct {
	Key       null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	UserAgent null.String `boil:"user_agent" json:"user_agent,omitempty" toml:"user_agent" yaml:"user_agent,omitempty"`
	IP        null.String `boil:"ip" json:"ip,omitempty" toml:"ip" yaml:"ip,omitempty"`
	CreatedAt null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerSessionColumns = struct {
	Key       string
	ID        string
	UserID    string
	UserAgent string
	IP        string
	CreatedAt string
	UpdatedAt string
}{
	Key:       "key",
	ID:        "id",
	UserID:    "user_id",
	UserAgent: "user_agent",
	IP:        "ip",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var AuthorizerSessionTableColumns = struct {
	Key       string
	ID        string
	UserID    string
	UserAgent string
	IP        string
	CreatedAt string
	UpdatedAt string
}{
	Key:       "authorizer_sessions.key",
	ID:        "authorizer_sessions.id",
	UserID:    "authorizer_sessions.user_id",
	UserAgent: "authorizer_sessions.user_agent",
	IP:        "authorizer_sessions.ip",
	CreatedAt: "authorizer_sessions.created_at",
	UpdatedAt: "authorizer_sessions.updated_at",
}

// Generated where

var AuthorizerSessionWhere = struct {
	Key       whereHelpernull_String
	ID        whereHelperstring
	UserID    whereHelpernull_String
	UserAgent whereHelpernull_String
	IP        whereHelpernull_String
	CreatedAt whereHelpernull_Int64
	UpdatedAt whereHelpernull_Int64
}{
	Key:       whereHelpernull_String{field: "\"authorizer_sessions\".\"key\""},
	ID:        whereHelperstring{field: "\"authorizer_sessions\".\"id\""},
	UserID:    whereHelpernull_String{field: "\"authorizer_sessions\".\"user_id\""},
	UserAgent: whereHelpernull_String{field: "\"authorizer_sessions\".\"user_agent\""},
	IP:        whereHelpernull_String{field: "\"authorizer_sessions\".\"ip\""},
	CreatedAt: whereHelpernull_Int64{field: "\"authorizer_sessions\".\"created_at\""},
	UpdatedAt: whereHelpernull_Int64{field: "\"authorizer_sessions\".\"updated_at\""},
}

// AuthorizerSessionRels is where relationship names are stored.
var AuthorizerSessionRels = struct {
}{}

// authorizerSessionR is where relationships are stored.
type authorizerSessionR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerSessionR) NewStruct() *authorizerSessionR {
	return &authorizerSessionR{}
}

// authorizerSessionL is where Load methods for each relationship are stored.
type authorizerSessionL struct{}

var (
	authorizerSessionAllColumns            = []string{"key", "id", "user_id", "user_agent", "ip", "created_at", "updated_at"}
	authorizerSessionColumnsWithoutDefault = []string{"id"}
	authorizerSessionColumnsWithDefault    = []string{"key", "user_id", "user_agent", "ip", "created_at", "updated_at"}
	authorizerSessionPrimaryKeyColumns     = []string{"id"}
	authorizerSessionGeneratedColumns      = []string{}
)

type (
	// AuthorizerSessionSlice is an alias for a slice of pointers to AuthorizerSession.
	// This should almost always be used instead of []AuthorizerSession.
	AuthorizerSessionSlice []*AuthorizerSession
	// AuthorizerSessionHook is the signature for custom AuthorizerSession hook methods
	AuthorizerSessionHook func(context.Context, boil.ContextExecutor, *AuthorizerSession) error

	authorizerSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerSessionType                 = reflect.TypeOf(&AuthorizerSession{})
	authorizerSessionMapping              = queries.MakeStructMapping(authorizerSessionType)
	authorizerSessionPrimaryKeyMapping, _ = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, authorizerSessionPrimaryKeyColumns)
	authorizerSessionInsertCacheMut       sync.RWMutex
	authorizerSessionInsertCache          = make(map[string]insertCache)
	authorizerSessionUpdateCacheMut       sync.RWMutex
	authorizerSessionUpdateCache          = make(map[string]updateCache)
	authorizerSessionUpsertCacheMut       sync.RWMutex
	authorizerSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerSessionAfterSelectHooks []AuthorizerSessionHook

var authorizerSessionBeforeInsertHooks []AuthorizerSessionHook
var authorizerSessionAfterInsertHooks []AuthorizerSessionHook

var authorizerSessionBeforeUpdateHooks []AuthorizerSessionHook
var authorizerSessionAfterUpdateHooks []AuthorizerSessionHook

var authorizerSessionBeforeDeleteHooks []AuthorizerSessionHook
var authorizerSessionAfterDeleteHooks []AuthorizerSessionHook

var authorizerSessionBeforeUpsertHooks []AuthorizerSessionHook
var authorizerSessionAfterUpsertHooks []AuthorizerSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerSessionHook registers your hook function for all future operations.
func AddAuthorizerSessionHook(hookPoint boil.HookPoint, authorizerSessionHook AuthorizerSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerSessionAfterSelectHooks = append(authorizerSessionAfterSelectHooks, authorizerSessionHook)
	case boil.BeforeInsertHook:
		authorizerSessionBeforeInsertHooks = append(authorizerSessionBeforeInsertHooks, authorizerSessionHook)
	case boil.AfterInsertHook:
		authorizerSessionAfterInsertHooks = append(authorizerSessionAfterInsertHooks, authorizerSessionHook)
	case boil.BeforeUpdateHook:
		authorizerSessionBeforeUpdateHooks = append(authorizerSessionBeforeUpdateHooks, authorizerSessionHook)
	case boil.AfterUpdateHook:
		authorizerSessionAfterUpdateHooks = append(authorizerSessionAfterUpdateHooks, authorizerSessionHook)
	case boil.BeforeDeleteHook:
		authorizerSessionBeforeDeleteHooks = append(authorizerSessionBeforeDeleteHooks, authorizerSessionHook)
	case boil.AfterDeleteHook:
		authorizerSessionAfterDeleteHooks = append(authorizerSessionAfterDeleteHooks, authorizerSessionHook)
	case boil.BeforeUpsertHook:
		authorizerSessionBeforeUpsertHooks = append(authorizerSessionBeforeUpsertHooks, authorizerSessionHook)
	case boil.AfterUpsertHook:
		authorizerSessionAfterUpsertHooks = append(authorizerSessionAfterUpsertHooks, authorizerSessionHook)
	}
}

// OneG returns a single authorizerSession record from the query using the global executor.
func (q authorizerSessionQuery) OneG(ctx context.Context) (*AuthorizerSession, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerSession record from the query.
func (q authorizerSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerSession, error) {
	o := &AuthorizerSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerSession records from the query using the global executor.
func (q authorizerSessionQuery) AllG(ctx context.Context) (AuthorizerSessionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerSession records from the query.
func (q authorizerSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerSessionSlice, error) {
	var o []*AuthorizerSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerSession slice")
	}

	if len(authorizerSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerSession records in the query using the global executor
func (q authorizerSessionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerSession records in the query.
func (q authorizerSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_sessions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerSessionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_sessions exists")
	}

	return count > 0, nil
}

// AuthorizerSessions retrieves all the records using an executor.
func AuthorizerSessions(mods ...qm.QueryMod) authorizerSessionQuery {
	mods = append(mods, qm.From("\"authorizer_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_sessions\".*"})
	}

	return authorizerSessionQuery{q}
}

// FindAuthorizerSessionG retrieves a single record by ID.
func FindAuthorizerSessionG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerSession, error) {
	return FindAuthorizerSession(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerSession, error) {
	authorizerSessionObj := &AuthorizerSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_sessions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_sessions")
	}

	if err = authorizerSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerSessionObj, err
	}

	return authorizerSessionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerSession) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerSessionInsertCacheMut.RLock()
	cache, cached := authorizerSessionInsertCache[key]
	authorizerSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerSessionAllColumns,
			authorizerSessionColumnsWithDefault,
			authorizerSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_sessions")
	}

	if !cached {
		authorizerSessionInsertCacheMut.Lock()
		authorizerSessionInsertCache[key] = cache
		authorizerSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerSession record using the global executor.
// See Update for more documentation.
func (o *AuthorizerSession) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerSessionUpdateCacheMut.RLock()
	cache, cached := authorizerSessionUpdateCache[key]
	authorizerSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerSessionAllColumns,
			authorizerSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, append(wl, authorizerSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_sessions")
	}

	if !cached {
		authorizerSessionUpdateCacheMut.Lock()
		authorizerSessionUpdateCache[key] = cache
		authorizerSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerSessionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_sessions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerSessionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerSession")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerSession) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerSessionUpsertCacheMut.RLock()
	cache, cached := authorizerSessionUpsertCache[key]
	authorizerSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerSessionAllColumns,
			authorizerSessionColumnsWithDefault,
			authorizerSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerSessionAllColumns,
			authorizerSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_sessions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerSessionPrimaryKeyColumns))
			copy(conflict, authorizerSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_sessions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerSessionType, authorizerSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_sessions")
	}

	if !cached {
		authorizerSessionUpsertCacheMut.Lock()
		authorizerSessionUpsertCache[key] = cache
		authorizerSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerSession record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerSession) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_sessions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerSessionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_sessions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerSessionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_sessions")
	}

	if len(authorizerSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerSession) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerSession provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerSessionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerSessionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_sessions\".* FROM \"authorizer_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerSessionSlice")
	}

	*o = slice

	return nil
}

// AuthorizerSessionExistsG checks if the AuthorizerSession row exists.
func AuthorizerSessionExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerSessionExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerSessionExists checks if the AuthorizerSession row exists.
func AuthorizerSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_sessions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_sessions exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerSession row exists.
func (o *AuthorizerSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerSessionExists(ctx, exec, o.ID)
}
