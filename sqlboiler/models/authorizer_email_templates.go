// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerEmailTemplate is an object representing the database table.
type AuthorizerEmailTemplate struct {
	Key       null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventName null.String `boil:"event_name" json:"event_name,omitempty" toml:"event_name" yaml:"event_name,omitempty"`
	Subject   null.String `boil:"subject" json:"subject,omitempty" toml:"subject" yaml:"subject,omitempty"`
	Template  null.String `boil:"template" json:"template,omitempty" toml:"template" yaml:"template,omitempty"`
	Design    null.String `boil:"design" json:"design,omitempty" toml:"design" yaml:"design,omitempty"`
	CreatedAt null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerEmailTemplateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerEmailTemplateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerEmailTemplateColumns = struct {
	Key       string
	ID        string
	EventName string
	Subject   string
	Template  string
	Design    string
	CreatedAt string
	UpdatedAt string
}{
	Key:       "key",
	ID:        "id",
	EventName: "event_name",
	Subject:   "subject",
	Template:  "template",
	Design:    "design",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var AuthorizerEmailTemplateTableColumns = struct {
	Key       string
	ID        string
	EventName string
	Subject   string
	Template  string
	Design    string
	CreatedAt string
	UpdatedAt string
}{
	Key:       "authorizer_email_templates.key",
	ID:        "authorizer_email_templates.id",
	EventName: "authorizer_email_templates.event_name",
	Subject:   "authorizer_email_templates.subject",
	Template:  "authorizer_email_templates.template",
	Design:    "authorizer_email_templates.design",
	CreatedAt: "authorizer_email_templates.created_at",
	UpdatedAt: "authorizer_email_templates.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AuthorizerEmailTemplateWhere = struct {
	Key       whereHelpernull_String
	ID        whereHelperstring
	EventName whereHelpernull_String
	Subject   whereHelpernull_String
	Template  whereHelpernull_String
	Design    whereHelpernull_String
	CreatedAt whereHelpernull_Int64
	UpdatedAt whereHelpernull_Int64
}{
	Key:       whereHelpernull_String{field: "\"authorizer_email_templates\".\"key\""},
	ID:        whereHelperstring{field: "\"authorizer_email_templates\".\"id\""},
	EventName: whereHelpernull_String{field: "\"authorizer_email_templates\".\"event_name\""},
	Subject:   whereHelpernull_String{field: "\"authorizer_email_templates\".\"subject\""},
	Template:  whereHelpernull_String{field: "\"authorizer_email_templates\".\"template\""},
	Design:    whereHelpernull_String{field: "\"authorizer_email_templates\".\"design\""},
	CreatedAt: whereHelpernull_Int64{field: "\"authorizer_email_templates\".\"created_at\""},
	UpdatedAt: whereHelpernull_Int64{field: "\"authorizer_email_templates\".\"updated_at\""},
}

// AuthorizerEmailTemplateRels is where relationship names are stored.
var AuthorizerEmailTemplateRels = struct {
}{}

// authorizerEmailTemplateR is where relationships are stored.
type authorizerEmailTemplateR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerEmailTemplateR) NewStruct() *authorizerEmailTemplateR {
	return &authorizerEmailTemplateR{}
}

// authorizerEmailTemplateL is where Load methods for each relationship are stored.
type authorizerEmailTemplateL struct{}

var (
	authorizerEmailTemplateAllColumns            = []string{"key", "id", "event_name", "subject", "template", "design", "created_at", "updated_at"}
	authorizerEmailTemplateColumnsWithoutDefault = []string{"id"}
	authorizerEmailTemplateColumnsWithDefault    = []string{"key", "event_name", "subject", "template", "design", "created_at", "updated_at"}
	authorizerEmailTemplatePrimaryKeyColumns     = []string{"id"}
	authorizerEmailTemplateGeneratedColumns      = []string{}
)

type (
	// AuthorizerEmailTemplateSlice is an alias for a slice of pointers to AuthorizerEmailTemplate.
	// This should almost always be used instead of []AuthorizerEmailTemplate.
	AuthorizerEmailTemplateSlice []*AuthorizerEmailTemplate
	// AuthorizerEmailTemplateHook is the signature for custom AuthorizerEmailTemplate hook methods
	AuthorizerEmailTemplateHook func(context.Context, boil.ContextExecutor, *AuthorizerEmailTemplate) error

	authorizerEmailTemplateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerEmailTemplateType                 = reflect.TypeOf(&AuthorizerEmailTemplate{})
	authorizerEmailTemplateMapping              = queries.MakeStructMapping(authorizerEmailTemplateType)
	authorizerEmailTemplatePrimaryKeyMapping, _ = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, authorizerEmailTemplatePrimaryKeyColumns)
	authorizerEmailTemplateInsertCacheMut       sync.RWMutex
	authorizerEmailTemplateInsertCache          = make(map[string]insertCache)
	authorizerEmailTemplateUpdateCacheMut       sync.RWMutex
	authorizerEmailTemplateUpdateCache          = make(map[string]updateCache)
	authorizerEmailTemplateUpsertCacheMut       sync.RWMutex
	authorizerEmailTemplateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerEmailTemplateAfterSelectHooks []AuthorizerEmailTemplateHook

var authorizerEmailTemplateBeforeInsertHooks []AuthorizerEmailTemplateHook
var authorizerEmailTemplateAfterInsertHooks []AuthorizerEmailTemplateHook

var authorizerEmailTemplateBeforeUpdateHooks []AuthorizerEmailTemplateHook
var authorizerEmailTemplateAfterUpdateHooks []AuthorizerEmailTemplateHook

var authorizerEmailTemplateBeforeDeleteHooks []AuthorizerEmailTemplateHook
var authorizerEmailTemplateAfterDeleteHooks []AuthorizerEmailTemplateHook

var authorizerEmailTemplateBeforeUpsertHooks []AuthorizerEmailTemplateHook
var authorizerEmailTemplateAfterUpsertHooks []AuthorizerEmailTemplateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerEmailTemplate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerEmailTemplate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerEmailTemplate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerEmailTemplate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerEmailTemplate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerEmailTemplate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerEmailTemplate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerEmailTemplate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerEmailTemplate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEmailTemplateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerEmailTemplateHook registers your hook function for all future operations.
func AddAuthorizerEmailTemplateHook(hookPoint boil.HookPoint, authorizerEmailTemplateHook AuthorizerEmailTemplateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerEmailTemplateAfterSelectHooks = append(authorizerEmailTemplateAfterSelectHooks, authorizerEmailTemplateHook)
	case boil.BeforeInsertHook:
		authorizerEmailTemplateBeforeInsertHooks = append(authorizerEmailTemplateBeforeInsertHooks, authorizerEmailTemplateHook)
	case boil.AfterInsertHook:
		authorizerEmailTemplateAfterInsertHooks = append(authorizerEmailTemplateAfterInsertHooks, authorizerEmailTemplateHook)
	case boil.BeforeUpdateHook:
		authorizerEmailTemplateBeforeUpdateHooks = append(authorizerEmailTemplateBeforeUpdateHooks, authorizerEmailTemplateHook)
	case boil.AfterUpdateHook:
		authorizerEmailTemplateAfterUpdateHooks = append(authorizerEmailTemplateAfterUpdateHooks, authorizerEmailTemplateHook)
	case boil.BeforeDeleteHook:
		authorizerEmailTemplateBeforeDeleteHooks = append(authorizerEmailTemplateBeforeDeleteHooks, authorizerEmailTemplateHook)
	case boil.AfterDeleteHook:
		authorizerEmailTemplateAfterDeleteHooks = append(authorizerEmailTemplateAfterDeleteHooks, authorizerEmailTemplateHook)
	case boil.BeforeUpsertHook:
		authorizerEmailTemplateBeforeUpsertHooks = append(authorizerEmailTemplateBeforeUpsertHooks, authorizerEmailTemplateHook)
	case boil.AfterUpsertHook:
		authorizerEmailTemplateAfterUpsertHooks = append(authorizerEmailTemplateAfterUpsertHooks, authorizerEmailTemplateHook)
	}
}

// OneG returns a single authorizerEmailTemplate record from the query using the global executor.
func (q authorizerEmailTemplateQuery) OneG(ctx context.Context) (*AuthorizerEmailTemplate, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerEmailTemplate record from the query.
func (q authorizerEmailTemplateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerEmailTemplate, error) {
	o := &AuthorizerEmailTemplate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_email_templates")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerEmailTemplate records from the query using the global executor.
func (q authorizerEmailTemplateQuery) AllG(ctx context.Context) (AuthorizerEmailTemplateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerEmailTemplate records from the query.
func (q authorizerEmailTemplateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerEmailTemplateSlice, error) {
	var o []*AuthorizerEmailTemplate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerEmailTemplate slice")
	}

	if len(authorizerEmailTemplateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerEmailTemplate records in the query using the global executor
func (q authorizerEmailTemplateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerEmailTemplate records in the query.
func (q authorizerEmailTemplateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_email_templates rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerEmailTemplateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerEmailTemplateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_email_templates exists")
	}

	return count > 0, nil
}

// AuthorizerEmailTemplates retrieves all the records using an executor.
func AuthorizerEmailTemplates(mods ...qm.QueryMod) authorizerEmailTemplateQuery {
	mods = append(mods, qm.From("\"authorizer_email_templates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_email_templates\".*"})
	}

	return authorizerEmailTemplateQuery{q}
}

// FindAuthorizerEmailTemplateG retrieves a single record by ID.
func FindAuthorizerEmailTemplateG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerEmailTemplate, error) {
	return FindAuthorizerEmailTemplate(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerEmailTemplate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerEmailTemplate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerEmailTemplate, error) {
	authorizerEmailTemplateObj := &AuthorizerEmailTemplate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_email_templates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerEmailTemplateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_email_templates")
	}

	if err = authorizerEmailTemplateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerEmailTemplateObj, err
	}

	return authorizerEmailTemplateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerEmailTemplate) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerEmailTemplate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_email_templates provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerEmailTemplateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerEmailTemplateInsertCacheMut.RLock()
	cache, cached := authorizerEmailTemplateInsertCache[key]
	authorizerEmailTemplateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerEmailTemplateAllColumns,
			authorizerEmailTemplateColumnsWithDefault,
			authorizerEmailTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_email_templates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_email_templates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_email_templates")
	}

	if !cached {
		authorizerEmailTemplateInsertCacheMut.Lock()
		authorizerEmailTemplateInsertCache[key] = cache
		authorizerEmailTemplateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerEmailTemplate record using the global executor.
// See Update for more documentation.
func (o *AuthorizerEmailTemplate) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerEmailTemplate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerEmailTemplate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerEmailTemplateUpdateCacheMut.RLock()
	cache, cached := authorizerEmailTemplateUpdateCache[key]
	authorizerEmailTemplateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerEmailTemplateAllColumns,
			authorizerEmailTemplatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_email_templates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_email_templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerEmailTemplatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, append(wl, authorizerEmailTemplatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_email_templates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_email_templates")
	}

	if !cached {
		authorizerEmailTemplateUpdateCacheMut.Lock()
		authorizerEmailTemplateUpdateCache[key] = cache
		authorizerEmailTemplateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerEmailTemplateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerEmailTemplateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_email_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_email_templates")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerEmailTemplateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerEmailTemplateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEmailTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_email_templates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerEmailTemplatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerEmailTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerEmailTemplate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerEmailTemplate) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerEmailTemplate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_email_templates provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerEmailTemplateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerEmailTemplateUpsertCacheMut.RLock()
	cache, cached := authorizerEmailTemplateUpsertCache[key]
	authorizerEmailTemplateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerEmailTemplateAllColumns,
			authorizerEmailTemplateColumnsWithDefault,
			authorizerEmailTemplateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerEmailTemplateAllColumns,
			authorizerEmailTemplatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_email_templates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerEmailTemplatePrimaryKeyColumns))
			copy(conflict, authorizerEmailTemplatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_email_templates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerEmailTemplateType, authorizerEmailTemplateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_email_templates")
	}

	if !cached {
		authorizerEmailTemplateUpsertCacheMut.Lock()
		authorizerEmailTemplateUpsertCache[key] = cache
		authorizerEmailTemplateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerEmailTemplate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerEmailTemplate) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerEmailTemplate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerEmailTemplate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerEmailTemplate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerEmailTemplatePrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_email_templates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_email_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_email_templates")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerEmailTemplateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerEmailTemplateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerEmailTemplateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_email_templates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_email_templates")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerEmailTemplateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerEmailTemplateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerEmailTemplateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEmailTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_email_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerEmailTemplatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerEmailTemplate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_email_templates")
	}

	if len(authorizerEmailTemplateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerEmailTemplate) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerEmailTemplate provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerEmailTemplate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerEmailTemplate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerEmailTemplateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerEmailTemplateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerEmailTemplateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerEmailTemplateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEmailTemplatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_email_templates\".* FROM \"authorizer_email_templates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerEmailTemplatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerEmailTemplateSlice")
	}

	*o = slice

	return nil
}

// AuthorizerEmailTemplateExistsG checks if the AuthorizerEmailTemplate row exists.
func AuthorizerEmailTemplateExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerEmailTemplateExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerEmailTemplateExists checks if the AuthorizerEmailTemplate row exists.
func AuthorizerEmailTemplateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_email_templates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_email_templates exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerEmailTemplate row exists.
func (o *AuthorizerEmailTemplate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerEmailTemplateExists(ctx, exec, o.ID)
}
