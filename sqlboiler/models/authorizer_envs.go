// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerEnv is an object representing the database table.
type AuthorizerEnv struct {
	Key           null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EnvData       null.String `boil:"env_data" json:"env_data,omitempty" toml:"env_data" yaml:"env_data,omitempty"`
	Hash          null.String `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	EncryptionKey null.String `boil:"encryption_key" json:"encryption_key,omitempty" toml:"encryption_key" yaml:"encryption_key,omitempty"`
	UpdatedAt     null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CreatedAt     null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *authorizerEnvR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerEnvL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerEnvColumns = struct {
	Key           string
	ID            string
	EnvData       string
	Hash          string
	EncryptionKey string
	UpdatedAt     string
	CreatedAt     string
}{
	Key:           "key",
	ID:            "id",
	EnvData:       "env_data",
	Hash:          "hash",
	EncryptionKey: "encryption_key",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var AuthorizerEnvTableColumns = struct {
	Key           string
	ID            string
	EnvData       string
	Hash          string
	EncryptionKey string
	UpdatedAt     string
	CreatedAt     string
}{
	Key:           "authorizer_envs.key",
	ID:            "authorizer_envs.id",
	EnvData:       "authorizer_envs.env_data",
	Hash:          "authorizer_envs.hash",
	EncryptionKey: "authorizer_envs.encryption_key",
	UpdatedAt:     "authorizer_envs.updated_at",
	CreatedAt:     "authorizer_envs.created_at",
}

// Generated where

var AuthorizerEnvWhere = struct {
	Key           whereHelpernull_String
	ID            whereHelperstring
	EnvData       whereHelpernull_String
	Hash          whereHelpernull_String
	EncryptionKey whereHelpernull_String
	UpdatedAt     whereHelpernull_Int64
	CreatedAt     whereHelpernull_Int64
}{
	Key:           whereHelpernull_String{field: "\"authorizer_envs\".\"key\""},
	ID:            whereHelperstring{field: "\"authorizer_envs\".\"id\""},
	EnvData:       whereHelpernull_String{field: "\"authorizer_envs\".\"env_data\""},
	Hash:          whereHelpernull_String{field: "\"authorizer_envs\".\"hash\""},
	EncryptionKey: whereHelpernull_String{field: "\"authorizer_envs\".\"encryption_key\""},
	UpdatedAt:     whereHelpernull_Int64{field: "\"authorizer_envs\".\"updated_at\""},
	CreatedAt:     whereHelpernull_Int64{field: "\"authorizer_envs\".\"created_at\""},
}

// AuthorizerEnvRels is where relationship names are stored.
var AuthorizerEnvRels = struct {
}{}

// authorizerEnvR is where relationships are stored.
type authorizerEnvR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerEnvR) NewStruct() *authorizerEnvR {
	return &authorizerEnvR{}
}

// authorizerEnvL is where Load methods for each relationship are stored.
type authorizerEnvL struct{}

var (
	authorizerEnvAllColumns            = []string{"key", "id", "env_data", "hash", "encryption_key", "updated_at", "created_at"}
	authorizerEnvColumnsWithoutDefault = []string{"id"}
	authorizerEnvColumnsWithDefault    = []string{"key", "env_data", "hash", "encryption_key", "updated_at", "created_at"}
	authorizerEnvPrimaryKeyColumns     = []string{"id"}
	authorizerEnvGeneratedColumns      = []string{}
)

type (
	// AuthorizerEnvSlice is an alias for a slice of pointers to AuthorizerEnv.
	// This should almost always be used instead of []AuthorizerEnv.
	AuthorizerEnvSlice []*AuthorizerEnv
	// AuthorizerEnvHook is the signature for custom AuthorizerEnv hook methods
	AuthorizerEnvHook func(context.Context, boil.ContextExecutor, *AuthorizerEnv) error

	authorizerEnvQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerEnvType                 = reflect.TypeOf(&AuthorizerEnv{})
	authorizerEnvMapping              = queries.MakeStructMapping(authorizerEnvType)
	authorizerEnvPrimaryKeyMapping, _ = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, authorizerEnvPrimaryKeyColumns)
	authorizerEnvInsertCacheMut       sync.RWMutex
	authorizerEnvInsertCache          = make(map[string]insertCache)
	authorizerEnvUpdateCacheMut       sync.RWMutex
	authorizerEnvUpdateCache          = make(map[string]updateCache)
	authorizerEnvUpsertCacheMut       sync.RWMutex
	authorizerEnvUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerEnvAfterSelectHooks []AuthorizerEnvHook

var authorizerEnvBeforeInsertHooks []AuthorizerEnvHook
var authorizerEnvAfterInsertHooks []AuthorizerEnvHook

var authorizerEnvBeforeUpdateHooks []AuthorizerEnvHook
var authorizerEnvAfterUpdateHooks []AuthorizerEnvHook

var authorizerEnvBeforeDeleteHooks []AuthorizerEnvHook
var authorizerEnvAfterDeleteHooks []AuthorizerEnvHook

var authorizerEnvBeforeUpsertHooks []AuthorizerEnvHook
var authorizerEnvAfterUpsertHooks []AuthorizerEnvHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerEnv) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerEnv) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerEnv) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerEnv) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerEnv) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerEnv) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerEnv) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerEnv) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerEnv) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerEnvAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerEnvHook registers your hook function for all future operations.
func AddAuthorizerEnvHook(hookPoint boil.HookPoint, authorizerEnvHook AuthorizerEnvHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerEnvAfterSelectHooks = append(authorizerEnvAfterSelectHooks, authorizerEnvHook)
	case boil.BeforeInsertHook:
		authorizerEnvBeforeInsertHooks = append(authorizerEnvBeforeInsertHooks, authorizerEnvHook)
	case boil.AfterInsertHook:
		authorizerEnvAfterInsertHooks = append(authorizerEnvAfterInsertHooks, authorizerEnvHook)
	case boil.BeforeUpdateHook:
		authorizerEnvBeforeUpdateHooks = append(authorizerEnvBeforeUpdateHooks, authorizerEnvHook)
	case boil.AfterUpdateHook:
		authorizerEnvAfterUpdateHooks = append(authorizerEnvAfterUpdateHooks, authorizerEnvHook)
	case boil.BeforeDeleteHook:
		authorizerEnvBeforeDeleteHooks = append(authorizerEnvBeforeDeleteHooks, authorizerEnvHook)
	case boil.AfterDeleteHook:
		authorizerEnvAfterDeleteHooks = append(authorizerEnvAfterDeleteHooks, authorizerEnvHook)
	case boil.BeforeUpsertHook:
		authorizerEnvBeforeUpsertHooks = append(authorizerEnvBeforeUpsertHooks, authorizerEnvHook)
	case boil.AfterUpsertHook:
		authorizerEnvAfterUpsertHooks = append(authorizerEnvAfterUpsertHooks, authorizerEnvHook)
	}
}

// OneG returns a single authorizerEnv record from the query using the global executor.
func (q authorizerEnvQuery) OneG(ctx context.Context) (*AuthorizerEnv, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerEnv record from the query.
func (q authorizerEnvQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerEnv, error) {
	o := &AuthorizerEnv{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_envs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerEnv records from the query using the global executor.
func (q authorizerEnvQuery) AllG(ctx context.Context) (AuthorizerEnvSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerEnv records from the query.
func (q authorizerEnvQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerEnvSlice, error) {
	var o []*AuthorizerEnv

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerEnv slice")
	}

	if len(authorizerEnvAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerEnv records in the query using the global executor
func (q authorizerEnvQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerEnv records in the query.
func (q authorizerEnvQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_envs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerEnvQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerEnvQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_envs exists")
	}

	return count > 0, nil
}

// AuthorizerEnvs retrieves all the records using an executor.
func AuthorizerEnvs(mods ...qm.QueryMod) authorizerEnvQuery {
	mods = append(mods, qm.From("\"authorizer_envs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_envs\".*"})
	}

	return authorizerEnvQuery{q}
}

// FindAuthorizerEnvG retrieves a single record by ID.
func FindAuthorizerEnvG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerEnv, error) {
	return FindAuthorizerEnv(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerEnv retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerEnv(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerEnv, error) {
	authorizerEnvObj := &AuthorizerEnv{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_envs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerEnvObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_envs")
	}

	if err = authorizerEnvObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerEnvObj, err
	}

	return authorizerEnvObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerEnv) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerEnv) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_envs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerEnvColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerEnvInsertCacheMut.RLock()
	cache, cached := authorizerEnvInsertCache[key]
	authorizerEnvInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerEnvAllColumns,
			authorizerEnvColumnsWithDefault,
			authorizerEnvColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_envs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_envs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_envs")
	}

	if !cached {
		authorizerEnvInsertCacheMut.Lock()
		authorizerEnvInsertCache[key] = cache
		authorizerEnvInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerEnv record using the global executor.
// See Update for more documentation.
func (o *AuthorizerEnv) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerEnv.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerEnv) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerEnvUpdateCacheMut.RLock()
	cache, cached := authorizerEnvUpdateCache[key]
	authorizerEnvUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerEnvAllColumns,
			authorizerEnvPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_envs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_envs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerEnvPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, append(wl, authorizerEnvPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_envs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_envs")
	}

	if !cached {
		authorizerEnvUpdateCacheMut.Lock()
		authorizerEnvUpdateCache[key] = cache
		authorizerEnvUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerEnvQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerEnvQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_envs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_envs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerEnvSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerEnvSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEnvPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_envs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerEnvPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerEnv slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerEnv")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerEnv) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerEnv) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_envs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerEnvColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerEnvUpsertCacheMut.RLock()
	cache, cached := authorizerEnvUpsertCache[key]
	authorizerEnvUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerEnvAllColumns,
			authorizerEnvColumnsWithDefault,
			authorizerEnvColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerEnvAllColumns,
			authorizerEnvPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_envs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerEnvPrimaryKeyColumns))
			copy(conflict, authorizerEnvPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_envs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerEnvType, authorizerEnvMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_envs")
	}

	if !cached {
		authorizerEnvUpsertCacheMut.Lock()
		authorizerEnvUpsertCache[key] = cache
		authorizerEnvUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerEnv record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerEnv) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerEnv record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerEnv) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerEnv provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerEnvPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_envs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_envs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_envs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerEnvQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerEnvQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerEnvQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_envs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_envs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerEnvSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerEnvSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerEnvBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEnvPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_envs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerEnvPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerEnv slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_envs")
	}

	if len(authorizerEnvAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerEnv) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerEnv provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerEnv) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerEnv(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerEnvSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerEnvSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerEnvSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerEnvSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerEnvPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_envs\".* FROM \"authorizer_envs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerEnvPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerEnvSlice")
	}

	*o = slice

	return nil
}

// AuthorizerEnvExistsG checks if the AuthorizerEnv row exists.
func AuthorizerEnvExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerEnvExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerEnvExists checks if the AuthorizerEnv row exists.
func AuthorizerEnvExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_envs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_envs exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerEnv row exists.
func (o *AuthorizerEnv) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerEnvExists(ctx, exec, o.ID)
}
