// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerVerificationRequest is an object representing the database table.
type AuthorizerVerificationRequest struct {
	Key         null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Token       null.String `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	Identifier  null.String `boil:"identifier" json:"identifier,omitempty" toml:"identifier" yaml:"identifier,omitempty"`
	ExpiresAt   null.Int64  `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	Email       null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Nonce       null.String `boil:"nonce" json:"nonce,omitempty" toml:"nonce" yaml:"nonce,omitempty"`
	RedirectURI null.String `boil:"redirect_uri" json:"redirect_uri,omitempty" toml:"redirect_uri" yaml:"redirect_uri,omitempty"`
	CreatedAt   null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerVerificationRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerVerificationRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerVerificationRequestColumns = struct {
	Key         string
	ID          string
	Token       string
	Identifier  string
	ExpiresAt   string
	Email       string
	Nonce       string
	RedirectURI string
	CreatedAt   string
	UpdatedAt   string
}{
	Key:         "key",
	ID:          "id",
	Token:       "token",
	Identifier:  "identifier",
	ExpiresAt:   "expires_at",
	Email:       "email",
	Nonce:       "nonce",
	RedirectURI: "redirect_uri",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AuthorizerVerificationRequestTableColumns = struct {
	Key         string
	ID          string
	Token       string
	Identifier  string
	ExpiresAt   string
	Email       string
	Nonce       string
	RedirectURI string
	CreatedAt   string
	UpdatedAt   string
}{
	Key:         "authorizer_verification_requests.key",
	ID:          "authorizer_verification_requests.id",
	Token:       "authorizer_verification_requests.token",
	Identifier:  "authorizer_verification_requests.identifier",
	ExpiresAt:   "authorizer_verification_requests.expires_at",
	Email:       "authorizer_verification_requests.email",
	Nonce:       "authorizer_verification_requests.nonce",
	RedirectURI: "authorizer_verification_requests.redirect_uri",
	CreatedAt:   "authorizer_verification_requests.created_at",
	UpdatedAt:   "authorizer_verification_requests.updated_at",
}

// Generated where

var AuthorizerVerificationRequestWhere = struct {
	Key         whereHelpernull_String
	ID          whereHelperstring
	Token       whereHelpernull_String
	Identifier  whereHelpernull_String
	ExpiresAt   whereHelpernull_Int64
	Email       whereHelpernull_String
	Nonce       whereHelpernull_String
	RedirectURI whereHelpernull_String
	CreatedAt   whereHelpernull_Int64
	UpdatedAt   whereHelpernull_Int64
}{
	Key:         whereHelpernull_String{field: "\"authorizer_verification_requests\".\"key\""},
	ID:          whereHelperstring{field: "\"authorizer_verification_requests\".\"id\""},
	Token:       whereHelpernull_String{field: "\"authorizer_verification_requests\".\"token\""},
	Identifier:  whereHelpernull_String{field: "\"authorizer_verification_requests\".\"identifier\""},
	ExpiresAt:   whereHelpernull_Int64{field: "\"authorizer_verification_requests\".\"expires_at\""},
	Email:       whereHelpernull_String{field: "\"authorizer_verification_requests\".\"email\""},
	Nonce:       whereHelpernull_String{field: "\"authorizer_verification_requests\".\"nonce\""},
	RedirectURI: whereHelpernull_String{field: "\"authorizer_verification_requests\".\"redirect_uri\""},
	CreatedAt:   whereHelpernull_Int64{field: "\"authorizer_verification_requests\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Int64{field: "\"authorizer_verification_requests\".\"updated_at\""},
}

// AuthorizerVerificationRequestRels is where relationship names are stored.
var AuthorizerVerificationRequestRels = struct {
}{}

// authorizerVerificationRequestR is where relationships are stored.
type authorizerVerificationRequestR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerVerificationRequestR) NewStruct() *authorizerVerificationRequestR {
	return &authorizerVerificationRequestR{}
}

// authorizerVerificationRequestL is where Load methods for each relationship are stored.
type authorizerVerificationRequestL struct{}

var (
	authorizerVerificationRequestAllColumns            = []string{"key", "id", "token", "identifier", "expires_at", "email", "nonce", "redirect_uri", "created_at", "updated_at"}
	authorizerVerificationRequestColumnsWithoutDefault = []string{"id"}
	authorizerVerificationRequestColumnsWithDefault    = []string{"key", "token", "identifier", "expires_at", "email", "nonce", "redirect_uri", "created_at", "updated_at"}
	authorizerVerificationRequestPrimaryKeyColumns     = []string{"id"}
	authorizerVerificationRequestGeneratedColumns      = []string{}
)

type (
	// AuthorizerVerificationRequestSlice is an alias for a slice of pointers to AuthorizerVerificationRequest.
	// This should almost always be used instead of []AuthorizerVerificationRequest.
	AuthorizerVerificationRequestSlice []*AuthorizerVerificationRequest
	// AuthorizerVerificationRequestHook is the signature for custom AuthorizerVerificationRequest hook methods
	AuthorizerVerificationRequestHook func(context.Context, boil.ContextExecutor, *AuthorizerVerificationRequest) error

	authorizerVerificationRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerVerificationRequestType                 = reflect.TypeOf(&AuthorizerVerificationRequest{})
	authorizerVerificationRequestMapping              = queries.MakeStructMapping(authorizerVerificationRequestType)
	authorizerVerificationRequestPrimaryKeyMapping, _ = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, authorizerVerificationRequestPrimaryKeyColumns)
	authorizerVerificationRequestInsertCacheMut       sync.RWMutex
	authorizerVerificationRequestInsertCache          = make(map[string]insertCache)
	authorizerVerificationRequestUpdateCacheMut       sync.RWMutex
	authorizerVerificationRequestUpdateCache          = make(map[string]updateCache)
	authorizerVerificationRequestUpsertCacheMut       sync.RWMutex
	authorizerVerificationRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerVerificationRequestAfterSelectHooks []AuthorizerVerificationRequestHook

var authorizerVerificationRequestBeforeInsertHooks []AuthorizerVerificationRequestHook
var authorizerVerificationRequestAfterInsertHooks []AuthorizerVerificationRequestHook

var authorizerVerificationRequestBeforeUpdateHooks []AuthorizerVerificationRequestHook
var authorizerVerificationRequestAfterUpdateHooks []AuthorizerVerificationRequestHook

var authorizerVerificationRequestBeforeDeleteHooks []AuthorizerVerificationRequestHook
var authorizerVerificationRequestAfterDeleteHooks []AuthorizerVerificationRequestHook

var authorizerVerificationRequestBeforeUpsertHooks []AuthorizerVerificationRequestHook
var authorizerVerificationRequestAfterUpsertHooks []AuthorizerVerificationRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerVerificationRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerVerificationRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerVerificationRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerVerificationRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerVerificationRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerVerificationRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerVerificationRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerVerificationRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerVerificationRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerVerificationRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerVerificationRequestHook registers your hook function for all future operations.
func AddAuthorizerVerificationRequestHook(hookPoint boil.HookPoint, authorizerVerificationRequestHook AuthorizerVerificationRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerVerificationRequestAfterSelectHooks = append(authorizerVerificationRequestAfterSelectHooks, authorizerVerificationRequestHook)
	case boil.BeforeInsertHook:
		authorizerVerificationRequestBeforeInsertHooks = append(authorizerVerificationRequestBeforeInsertHooks, authorizerVerificationRequestHook)
	case boil.AfterInsertHook:
		authorizerVerificationRequestAfterInsertHooks = append(authorizerVerificationRequestAfterInsertHooks, authorizerVerificationRequestHook)
	case boil.BeforeUpdateHook:
		authorizerVerificationRequestBeforeUpdateHooks = append(authorizerVerificationRequestBeforeUpdateHooks, authorizerVerificationRequestHook)
	case boil.AfterUpdateHook:
		authorizerVerificationRequestAfterUpdateHooks = append(authorizerVerificationRequestAfterUpdateHooks, authorizerVerificationRequestHook)
	case boil.BeforeDeleteHook:
		authorizerVerificationRequestBeforeDeleteHooks = append(authorizerVerificationRequestBeforeDeleteHooks, authorizerVerificationRequestHook)
	case boil.AfterDeleteHook:
		authorizerVerificationRequestAfterDeleteHooks = append(authorizerVerificationRequestAfterDeleteHooks, authorizerVerificationRequestHook)
	case boil.BeforeUpsertHook:
		authorizerVerificationRequestBeforeUpsertHooks = append(authorizerVerificationRequestBeforeUpsertHooks, authorizerVerificationRequestHook)
	case boil.AfterUpsertHook:
		authorizerVerificationRequestAfterUpsertHooks = append(authorizerVerificationRequestAfterUpsertHooks, authorizerVerificationRequestHook)
	}
}

// OneG returns a single authorizerVerificationRequest record from the query using the global executor.
func (q authorizerVerificationRequestQuery) OneG(ctx context.Context) (*AuthorizerVerificationRequest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerVerificationRequest record from the query.
func (q authorizerVerificationRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerVerificationRequest, error) {
	o := &AuthorizerVerificationRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_verification_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerVerificationRequest records from the query using the global executor.
func (q authorizerVerificationRequestQuery) AllG(ctx context.Context) (AuthorizerVerificationRequestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerVerificationRequest records from the query.
func (q authorizerVerificationRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerVerificationRequestSlice, error) {
	var o []*AuthorizerVerificationRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerVerificationRequest slice")
	}

	if len(authorizerVerificationRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerVerificationRequest records in the query using the global executor
func (q authorizerVerificationRequestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerVerificationRequest records in the query.
func (q authorizerVerificationRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_verification_requests rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerVerificationRequestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerVerificationRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_verification_requests exists")
	}

	return count > 0, nil
}

// AuthorizerVerificationRequests retrieves all the records using an executor.
func AuthorizerVerificationRequests(mods ...qm.QueryMod) authorizerVerificationRequestQuery {
	mods = append(mods, qm.From("\"authorizer_verification_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_verification_requests\".*"})
	}

	return authorizerVerificationRequestQuery{q}
}

// FindAuthorizerVerificationRequestG retrieves a single record by ID.
func FindAuthorizerVerificationRequestG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerVerificationRequest, error) {
	return FindAuthorizerVerificationRequest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerVerificationRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerVerificationRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerVerificationRequest, error) {
	authorizerVerificationRequestObj := &AuthorizerVerificationRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_verification_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerVerificationRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_verification_requests")
	}

	if err = authorizerVerificationRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerVerificationRequestObj, err
	}

	return authorizerVerificationRequestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerVerificationRequest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerVerificationRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_verification_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerVerificationRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerVerificationRequestInsertCacheMut.RLock()
	cache, cached := authorizerVerificationRequestInsertCache[key]
	authorizerVerificationRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerVerificationRequestAllColumns,
			authorizerVerificationRequestColumnsWithDefault,
			authorizerVerificationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_verification_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_verification_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_verification_requests")
	}

	if !cached {
		authorizerVerificationRequestInsertCacheMut.Lock()
		authorizerVerificationRequestInsertCache[key] = cache
		authorizerVerificationRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerVerificationRequest record using the global executor.
// See Update for more documentation.
func (o *AuthorizerVerificationRequest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerVerificationRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerVerificationRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerVerificationRequestUpdateCacheMut.RLock()
	cache, cached := authorizerVerificationRequestUpdateCache[key]
	authorizerVerificationRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerVerificationRequestAllColumns,
			authorizerVerificationRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_verification_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_verification_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerVerificationRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, append(wl, authorizerVerificationRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_verification_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_verification_requests")
	}

	if !cached {
		authorizerVerificationRequestUpdateCacheMut.Lock()
		authorizerVerificationRequestUpdateCache[key] = cache
		authorizerVerificationRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerVerificationRequestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerVerificationRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_verification_requests")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerVerificationRequestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerVerificationRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerVerificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_verification_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerVerificationRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerVerificationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerVerificationRequest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerVerificationRequest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerVerificationRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_verification_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerVerificationRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerVerificationRequestUpsertCacheMut.RLock()
	cache, cached := authorizerVerificationRequestUpsertCache[key]
	authorizerVerificationRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerVerificationRequestAllColumns,
			authorizerVerificationRequestColumnsWithDefault,
			authorizerVerificationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerVerificationRequestAllColumns,
			authorizerVerificationRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_verification_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerVerificationRequestPrimaryKeyColumns))
			copy(conflict, authorizerVerificationRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_verification_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerVerificationRequestType, authorizerVerificationRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_verification_requests")
	}

	if !cached {
		authorizerVerificationRequestUpsertCacheMut.Lock()
		authorizerVerificationRequestUpsertCache[key] = cache
		authorizerVerificationRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerVerificationRequest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerVerificationRequest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerVerificationRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerVerificationRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerVerificationRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerVerificationRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_verification_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_verification_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerVerificationRequestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerVerificationRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerVerificationRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_verification_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_verification_requests")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerVerificationRequestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerVerificationRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerVerificationRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerVerificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_verification_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerVerificationRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerVerificationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_verification_requests")
	}

	if len(authorizerVerificationRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerVerificationRequest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerVerificationRequest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerVerificationRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerVerificationRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerVerificationRequestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerVerificationRequestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerVerificationRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerVerificationRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerVerificationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_verification_requests\".* FROM \"authorizer_verification_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerVerificationRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerVerificationRequestSlice")
	}

	*o = slice

	return nil
}

// AuthorizerVerificationRequestExistsG checks if the AuthorizerVerificationRequest row exists.
func AuthorizerVerificationRequestExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerVerificationRequestExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerVerificationRequestExists checks if the AuthorizerVerificationRequest row exists.
func AuthorizerVerificationRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_verification_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_verification_requests exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerVerificationRequest row exists.
func (o *AuthorizerVerificationRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerVerificationRequestExists(ctx, exec, o.ID)
}
