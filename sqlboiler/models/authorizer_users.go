// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerUser is an object representing the database table.
type AuthorizerUser struct {
	Key                      null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID                       string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email                    null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	EmailVerifiedAt          null.Int64  `boil:"email_verified_at" json:"email_verified_at,omitempty" toml:"email_verified_at" yaml:"email_verified_at,omitempty"`
	Password                 null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	SignupMethods            null.String `boil:"signup_methods" json:"signup_methods,omitempty" toml:"signup_methods" yaml:"signup_methods,omitempty"`
	GivenName                null.String `boil:"given_name" json:"given_name,omitempty" toml:"given_name" yaml:"given_name,omitempty"`
	FamilyName               null.String `boil:"family_name" json:"family_name,omitempty" toml:"family_name" yaml:"family_name,omitempty"`
	MiddleName               null.String `boil:"middle_name" json:"middle_name,omitempty" toml:"middle_name" yaml:"middle_name,omitempty"`
	Nickname                 null.String `boil:"nickname" json:"nickname,omitempty" toml:"nickname" yaml:"nickname,omitempty"`
	Gender                   null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`
	Birthdate                null.String `boil:"birthdate" json:"birthdate,omitempty" toml:"birthdate" yaml:"birthdate,omitempty"`
	PhoneNumber              null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	PhoneNumberVerifiedAt    null.Int64  `boil:"phone_number_verified_at" json:"phone_number_verified_at,omitempty" toml:"phone_number_verified_at" yaml:"phone_number_verified_at,omitempty"`
	Picture                  null.String `boil:"picture" json:"picture,omitempty" toml:"picture" yaml:"picture,omitempty"`
	Roles                    null.String `boil:"roles" json:"roles,omitempty" toml:"roles" yaml:"roles,omitempty"`
	RevokedTimestamp         null.Int64  `boil:"revoked_timestamp" json:"revoked_timestamp,omitempty" toml:"revoked_timestamp" yaml:"revoked_timestamp,omitempty"`
	IsMultiFactorAuthEnabled null.Bool   `boil:"is_multi_factor_auth_enabled" json:"is_multi_factor_auth_enabled,omitempty" toml:"is_multi_factor_auth_enabled" yaml:"is_multi_factor_auth_enabled,omitempty"`
	UpdatedAt                null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	CreatedAt                null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	Tenant                   string      `boil:"tenant" json:"tenant" toml:"tenant" yaml:"tenant"`

	R *authorizerUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerUserColumns = struct {
	Key                      string
	ID                       string
	Email                    string
	EmailVerifiedAt          string
	Password                 string
	SignupMethods            string
	GivenName                string
	FamilyName               string
	MiddleName               string
	Nickname                 string
	Gender                   string
	Birthdate                string
	PhoneNumber              string
	PhoneNumberVerifiedAt    string
	Picture                  string
	Roles                    string
	RevokedTimestamp         string
	IsMultiFactorAuthEnabled string
	UpdatedAt                string
	CreatedAt                string
	Tenant                   string
}{
	Key:                      "key",
	ID:                       "id",
	Email:                    "email",
	EmailVerifiedAt:          "email_verified_at",
	Password:                 "password",
	SignupMethods:            "signup_methods",
	GivenName:                "given_name",
	FamilyName:               "family_name",
	MiddleName:               "middle_name",
	Nickname:                 "nickname",
	Gender:                   "gender",
	Birthdate:                "birthdate",
	PhoneNumber:              "phone_number",
	PhoneNumberVerifiedAt:    "phone_number_verified_at",
	Picture:                  "picture",
	Roles:                    "roles",
	RevokedTimestamp:         "revoked_timestamp",
	IsMultiFactorAuthEnabled: "is_multi_factor_auth_enabled",
	UpdatedAt:                "updated_at",
	CreatedAt:                "created_at",
	Tenant:                   "tenant",
}

var AuthorizerUserTableColumns = struct {
	Key                      string
	ID                       string
	Email                    string
	EmailVerifiedAt          string
	Password                 string
	SignupMethods            string
	GivenName                string
	FamilyName               string
	MiddleName               string
	Nickname                 string
	Gender                   string
	Birthdate                string
	PhoneNumber              string
	PhoneNumberVerifiedAt    string
	Picture                  string
	Roles                    string
	RevokedTimestamp         string
	IsMultiFactorAuthEnabled string
	UpdatedAt                string
	CreatedAt                string
	Tenant                   string
}{
	Key:                      "authorizer_users.key",
	ID:                       "authorizer_users.id",
	Email:                    "authorizer_users.email",
	EmailVerifiedAt:          "authorizer_users.email_verified_at",
	Password:                 "authorizer_users.password",
	SignupMethods:            "authorizer_users.signup_methods",
	GivenName:                "authorizer_users.given_name",
	FamilyName:               "authorizer_users.family_name",
	MiddleName:               "authorizer_users.middle_name",
	Nickname:                 "authorizer_users.nickname",
	Gender:                   "authorizer_users.gender",
	Birthdate:                "authorizer_users.birthdate",
	PhoneNumber:              "authorizer_users.phone_number",
	PhoneNumberVerifiedAt:    "authorizer_users.phone_number_verified_at",
	Picture:                  "authorizer_users.picture",
	Roles:                    "authorizer_users.roles",
	RevokedTimestamp:         "authorizer_users.revoked_timestamp",
	IsMultiFactorAuthEnabled: "authorizer_users.is_multi_factor_auth_enabled",
	UpdatedAt:                "authorizer_users.updated_at",
	CreatedAt:                "authorizer_users.created_at",
	Tenant:                   "authorizer_users.tenant",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AuthorizerUserWhere = struct {
	Key                      whereHelpernull_String
	ID                       whereHelperstring
	Email                    whereHelpernull_String
	EmailVerifiedAt          whereHelpernull_Int64
	Password                 whereHelpernull_String
	SignupMethods            whereHelpernull_String
	GivenName                whereHelpernull_String
	FamilyName               whereHelpernull_String
	MiddleName               whereHelpernull_String
	Nickname                 whereHelpernull_String
	Gender                   whereHelpernull_String
	Birthdate                whereHelpernull_String
	PhoneNumber              whereHelpernull_String
	PhoneNumberVerifiedAt    whereHelpernull_Int64
	Picture                  whereHelpernull_String
	Roles                    whereHelpernull_String
	RevokedTimestamp         whereHelpernull_Int64
	IsMultiFactorAuthEnabled whereHelpernull_Bool
	UpdatedAt                whereHelpernull_Int64
	CreatedAt                whereHelpernull_Int64
	Tenant                   whereHelperstring
}{
	Key:                      whereHelpernull_String{field: "\"authorizer_users\".\"key\""},
	ID:                       whereHelperstring{field: "\"authorizer_users\".\"id\""},
	Email:                    whereHelpernull_String{field: "\"authorizer_users\".\"email\""},
	EmailVerifiedAt:          whereHelpernull_Int64{field: "\"authorizer_users\".\"email_verified_at\""},
	Password:                 whereHelpernull_String{field: "\"authorizer_users\".\"password\""},
	SignupMethods:            whereHelpernull_String{field: "\"authorizer_users\".\"signup_methods\""},
	GivenName:                whereHelpernull_String{field: "\"authorizer_users\".\"given_name\""},
	FamilyName:               whereHelpernull_String{field: "\"authorizer_users\".\"family_name\""},
	MiddleName:               whereHelpernull_String{field: "\"authorizer_users\".\"middle_name\""},
	Nickname:                 whereHelpernull_String{field: "\"authorizer_users\".\"nickname\""},
	Gender:                   whereHelpernull_String{field: "\"authorizer_users\".\"gender\""},
	Birthdate:                whereHelpernull_String{field: "\"authorizer_users\".\"birthdate\""},
	PhoneNumber:              whereHelpernull_String{field: "\"authorizer_users\".\"phone_number\""},
	PhoneNumberVerifiedAt:    whereHelpernull_Int64{field: "\"authorizer_users\".\"phone_number_verified_at\""},
	Picture:                  whereHelpernull_String{field: "\"authorizer_users\".\"picture\""},
	Roles:                    whereHelpernull_String{field: "\"authorizer_users\".\"roles\""},
	RevokedTimestamp:         whereHelpernull_Int64{field: "\"authorizer_users\".\"revoked_timestamp\""},
	IsMultiFactorAuthEnabled: whereHelpernull_Bool{field: "\"authorizer_users\".\"is_multi_factor_auth_enabled\""},
	UpdatedAt:                whereHelpernull_Int64{field: "\"authorizer_users\".\"updated_at\""},
	CreatedAt:                whereHelpernull_Int64{field: "\"authorizer_users\".\"created_at\""},
	Tenant:                   whereHelperstring{field: "\"authorizer_users\".\"tenant\""},
}

// AuthorizerUserRels is where relationship names are stored.
var AuthorizerUserRels = struct {
	AuthorizerUserTenant string
}{
	AuthorizerUserTenant: "AuthorizerUserTenant",
}

// authorizerUserR is where relationships are stored.
type authorizerUserR struct {
	AuthorizerUserTenant *Tenant `boil:"AuthorizerUserTenant" json:"AuthorizerUserTenant" toml:"AuthorizerUserTenant" yaml:"AuthorizerUserTenant"`
}

// NewStruct creates a new relationship struct
func (*authorizerUserR) NewStruct() *authorizerUserR {
	return &authorizerUserR{}
}

func (r *authorizerUserR) GetAuthorizerUserTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.AuthorizerUserTenant
}

// authorizerUserL is where Load methods for each relationship are stored.
type authorizerUserL struct{}

var (
	authorizerUserAllColumns            = []string{"key", "id", "email", "email_verified_at", "password", "signup_methods", "given_name", "family_name", "middle_name", "nickname", "gender", "birthdate", "phone_number", "phone_number_verified_at", "picture", "roles", "revoked_timestamp", "is_multi_factor_auth_enabled", "updated_at", "created_at", "tenant"}
	authorizerUserColumnsWithoutDefault = []string{"id"}
	authorizerUserColumnsWithDefault    = []string{"key", "email", "email_verified_at", "password", "signup_methods", "given_name", "family_name", "middle_name", "nickname", "gender", "birthdate", "phone_number", "phone_number_verified_at", "picture", "roles", "revoked_timestamp", "is_multi_factor_auth_enabled", "updated_at", "created_at", "tenant"}
	authorizerUserPrimaryKeyColumns     = []string{"id"}
	authorizerUserGeneratedColumns      = []string{}
)

type (
	// AuthorizerUserSlice is an alias for a slice of pointers to AuthorizerUser.
	// This should almost always be used instead of []AuthorizerUser.
	AuthorizerUserSlice []*AuthorizerUser
	// AuthorizerUserHook is the signature for custom AuthorizerUser hook methods
	AuthorizerUserHook func(context.Context, boil.ContextExecutor, *AuthorizerUser) error

	authorizerUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerUserType                 = reflect.TypeOf(&AuthorizerUser{})
	authorizerUserMapping              = queries.MakeStructMapping(authorizerUserType)
	authorizerUserPrimaryKeyMapping, _ = queries.BindMapping(authorizerUserType, authorizerUserMapping, authorizerUserPrimaryKeyColumns)
	authorizerUserInsertCacheMut       sync.RWMutex
	authorizerUserInsertCache          = make(map[string]insertCache)
	authorizerUserUpdateCacheMut       sync.RWMutex
	authorizerUserUpdateCache          = make(map[string]updateCache)
	authorizerUserUpsertCacheMut       sync.RWMutex
	authorizerUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerUserAfterSelectHooks []AuthorizerUserHook

var authorizerUserBeforeInsertHooks []AuthorizerUserHook
var authorizerUserAfterInsertHooks []AuthorizerUserHook

var authorizerUserBeforeUpdateHooks []AuthorizerUserHook
var authorizerUserAfterUpdateHooks []AuthorizerUserHook

var authorizerUserBeforeDeleteHooks []AuthorizerUserHook
var authorizerUserAfterDeleteHooks []AuthorizerUserHook

var authorizerUserBeforeUpsertHooks []AuthorizerUserHook
var authorizerUserAfterUpsertHooks []AuthorizerUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerUserHook registers your hook function for all future operations.
func AddAuthorizerUserHook(hookPoint boil.HookPoint, authorizerUserHook AuthorizerUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerUserAfterSelectHooks = append(authorizerUserAfterSelectHooks, authorizerUserHook)
	case boil.BeforeInsertHook:
		authorizerUserBeforeInsertHooks = append(authorizerUserBeforeInsertHooks, authorizerUserHook)
	case boil.AfterInsertHook:
		authorizerUserAfterInsertHooks = append(authorizerUserAfterInsertHooks, authorizerUserHook)
	case boil.BeforeUpdateHook:
		authorizerUserBeforeUpdateHooks = append(authorizerUserBeforeUpdateHooks, authorizerUserHook)
	case boil.AfterUpdateHook:
		authorizerUserAfterUpdateHooks = append(authorizerUserAfterUpdateHooks, authorizerUserHook)
	case boil.BeforeDeleteHook:
		authorizerUserBeforeDeleteHooks = append(authorizerUserBeforeDeleteHooks, authorizerUserHook)
	case boil.AfterDeleteHook:
		authorizerUserAfterDeleteHooks = append(authorizerUserAfterDeleteHooks, authorizerUserHook)
	case boil.BeforeUpsertHook:
		authorizerUserBeforeUpsertHooks = append(authorizerUserBeforeUpsertHooks, authorizerUserHook)
	case boil.AfterUpsertHook:
		authorizerUserAfterUpsertHooks = append(authorizerUserAfterUpsertHooks, authorizerUserHook)
	}
}

// OneG returns a single authorizerUser record from the query using the global executor.
func (q authorizerUserQuery) OneG(ctx context.Context) (*AuthorizerUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerUser record from the query.
func (q authorizerUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerUser, error) {
	o := &AuthorizerUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerUser records from the query using the global executor.
func (q authorizerUserQuery) AllG(ctx context.Context) (AuthorizerUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerUser records from the query.
func (q authorizerUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerUserSlice, error) {
	var o []*AuthorizerUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerUser slice")
	}

	if len(authorizerUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerUser records in the query using the global executor
func (q authorizerUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerUser records in the query.
func (q authorizerUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_users rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_users exists")
	}

	return count > 0, nil
}

// AuthorizerUserTenant pointed to by the foreign key.
func (o *AuthorizerUser) AuthorizerUserTenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"alias\" = ?", o.Tenant),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadAuthorizerUserTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authorizerUserL) LoadAuthorizerUserTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthorizerUser interface{}, mods queries.Applicator) error {
	var slice []*AuthorizerUser
	var object *AuthorizerUser

	if singular {
		var ok bool
		object, ok = maybeAuthorizerUser.(*AuthorizerUser)
		if !ok {
			object = new(AuthorizerUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuthorizerUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuthorizerUser))
			}
		}
	} else {
		s, ok := maybeAuthorizerUser.(*[]*AuthorizerUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuthorizerUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuthorizerUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authorizerUserR{}
		}
		args = append(args, object.Tenant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authorizerUserR{}
			}

			for _, a := range args {
				if a == obj.Tenant {
					continue Outer
				}
			}

			args = append(args, obj.Tenant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.alias in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuthorizerUserTenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.AuthorizerUsers = append(foreign.R.AuthorizerUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tenant == foreign.Alias {
				local.R.AuthorizerUserTenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.AuthorizerUsers = append(foreign.R.AuthorizerUsers, local)
				break
			}
		}
	}

	return nil
}

// SetAuthorizerUserTenantG of the authorizerUser to the related item.
// Sets o.R.AuthorizerUserTenant to related.
// Adds o to related.R.AuthorizerUsers.
// Uses the global database handle.
func (o *AuthorizerUser) SetAuthorizerUserTenantG(ctx context.Context, insert bool, related *Tenant) error {
	return o.SetAuthorizerUserTenant(ctx, boil.GetContextDB(), insert, related)
}

// SetAuthorizerUserTenant of the authorizerUser to the related item.
// Sets o.R.AuthorizerUserTenant to related.
// Adds o to related.R.AuthorizerUsers.
func (o *AuthorizerUser) SetAuthorizerUserTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"authorizer_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant"}),
		strmangle.WhereClause("\"", "\"", 2, authorizerUserPrimaryKeyColumns),
	)
	values := []interface{}{related.Alias, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tenant = related.Alias
	if o.R == nil {
		o.R = &authorizerUserR{
			AuthorizerUserTenant: related,
		}
	} else {
		o.R.AuthorizerUserTenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			AuthorizerUsers: AuthorizerUserSlice{o},
		}
	} else {
		related.R.AuthorizerUsers = append(related.R.AuthorizerUsers, o)
	}

	return nil
}

// AuthorizerUsers retrieves all the records using an executor.
func AuthorizerUsers(mods ...qm.QueryMod) authorizerUserQuery {
	mods = append(mods, qm.From("\"authorizer_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_users\".*"})
	}

	return authorizerUserQuery{q}
}

// FindAuthorizerUserG retrieves a single record by ID.
func FindAuthorizerUserG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerUser, error) {
	return FindAuthorizerUser(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerUser, error) {
	authorizerUserObj := &AuthorizerUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_users")
	}

	if err = authorizerUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerUserObj, err
	}

	return authorizerUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerUserInsertCacheMut.RLock()
	cache, cached := authorizerUserInsertCache[key]
	authorizerUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerUserAllColumns,
			authorizerUserColumnsWithDefault,
			authorizerUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerUserType, authorizerUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerUserType, authorizerUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_users")
	}

	if !cached {
		authorizerUserInsertCacheMut.Lock()
		authorizerUserInsertCache[key] = cache
		authorizerUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerUser record using the global executor.
// See Update for more documentation.
func (o *AuthorizerUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerUserUpdateCacheMut.RLock()
	cache, cached := authorizerUserUpdateCache[key]
	authorizerUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerUserAllColumns,
			authorizerUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerUserType, authorizerUserMapping, append(wl, authorizerUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_users")
	}

	if !cached {
		authorizerUserUpdateCacheMut.Lock()
		authorizerUserUpdateCache[key] = cache
		authorizerUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_users")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerUser) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerUserUpsertCacheMut.RLock()
	cache, cached := authorizerUserUpsertCache[key]
	authorizerUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerUserAllColumns,
			authorizerUserColumnsWithDefault,
			authorizerUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerUserAllColumns,
			authorizerUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerUserPrimaryKeyColumns))
			copy(conflict, authorizerUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerUserType, authorizerUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerUserType, authorizerUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_users")
	}

	if !cached {
		authorizerUserUpsertCacheMut.Lock()
		authorizerUserUpsertCache[key] = cache
		authorizerUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerUser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerUserPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerUserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_users")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerUserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_users")
	}

	if len(authorizerUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_users\".* FROM \"authorizer_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerUserSlice")
	}

	*o = slice

	return nil
}

// AuthorizerUserExistsG checks if the AuthorizerUser row exists.
func AuthorizerUserExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerUserExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerUserExists checks if the AuthorizerUser row exists.
func AuthorizerUserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_users exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerUser row exists.
func (o *AuthorizerUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerUserExists(ctx, exec, o.ID)
}
