// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerOtp is an object representing the database table.
type AuthorizerOtp struct {
	Key         null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email       null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	PhoneNumber null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	Otp         null.String `boil:"otp" json:"otp,omitempty" toml:"otp" yaml:"otp,omitempty"`
	ExpiresAt   null.Int64  `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	CreatedAt   null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerOtpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerOtpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerOtpColumns = struct {
	Key         string
	ID          string
	Email       string
	PhoneNumber string
	Otp         string
	ExpiresAt   string
	CreatedAt   string
	UpdatedAt   string
}{
	Key:         "key",
	ID:          "id",
	Email:       "email",
	PhoneNumber: "phone_number",
	Otp:         "otp",
	ExpiresAt:   "expires_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AuthorizerOtpTableColumns = struct {
	Key         string
	ID          string
	Email       string
	PhoneNumber string
	Otp         string
	ExpiresAt   string
	CreatedAt   string
	UpdatedAt   string
}{
	Key:         "authorizer_otps.key",
	ID:          "authorizer_otps.id",
	Email:       "authorizer_otps.email",
	PhoneNumber: "authorizer_otps.phone_number",
	Otp:         "authorizer_otps.otp",
	ExpiresAt:   "authorizer_otps.expires_at",
	CreatedAt:   "authorizer_otps.created_at",
	UpdatedAt:   "authorizer_otps.updated_at",
}

// Generated where

var AuthorizerOtpWhere = struct {
	Key         whereHelpernull_String
	ID          whereHelperstring
	Email       whereHelpernull_String
	PhoneNumber whereHelpernull_String
	Otp         whereHelpernull_String
	ExpiresAt   whereHelpernull_Int64
	CreatedAt   whereHelpernull_Int64
	UpdatedAt   whereHelpernull_Int64
}{
	Key:         whereHelpernull_String{field: "\"authorizer_otps\".\"key\""},
	ID:          whereHelperstring{field: "\"authorizer_otps\".\"id\""},
	Email:       whereHelpernull_String{field: "\"authorizer_otps\".\"email\""},
	PhoneNumber: whereHelpernull_String{field: "\"authorizer_otps\".\"phone_number\""},
	Otp:         whereHelpernull_String{field: "\"authorizer_otps\".\"otp\""},
	ExpiresAt:   whereHelpernull_Int64{field: "\"authorizer_otps\".\"expires_at\""},
	CreatedAt:   whereHelpernull_Int64{field: "\"authorizer_otps\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Int64{field: "\"authorizer_otps\".\"updated_at\""},
}

// AuthorizerOtpRels is where relationship names are stored.
var AuthorizerOtpRels = struct {
}{}

// authorizerOtpR is where relationships are stored.
type authorizerOtpR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerOtpR) NewStruct() *authorizerOtpR {
	return &authorizerOtpR{}
}

// authorizerOtpL is where Load methods for each relationship are stored.
type authorizerOtpL struct{}

var (
	authorizerOtpAllColumns            = []string{"key", "id", "email", "phone_number", "otp", "expires_at", "created_at", "updated_at"}
	authorizerOtpColumnsWithoutDefault = []string{"id"}
	authorizerOtpColumnsWithDefault    = []string{"key", "email", "phone_number", "otp", "expires_at", "created_at", "updated_at"}
	authorizerOtpPrimaryKeyColumns     = []string{"id"}
	authorizerOtpGeneratedColumns      = []string{}
)

type (
	// AuthorizerOtpSlice is an alias for a slice of pointers to AuthorizerOtp.
	// This should almost always be used instead of []AuthorizerOtp.
	AuthorizerOtpSlice []*AuthorizerOtp
	// AuthorizerOtpHook is the signature for custom AuthorizerOtp hook methods
	AuthorizerOtpHook func(context.Context, boil.ContextExecutor, *AuthorizerOtp) error

	authorizerOtpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerOtpType                 = reflect.TypeOf(&AuthorizerOtp{})
	authorizerOtpMapping              = queries.MakeStructMapping(authorizerOtpType)
	authorizerOtpPrimaryKeyMapping, _ = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, authorizerOtpPrimaryKeyColumns)
	authorizerOtpInsertCacheMut       sync.RWMutex
	authorizerOtpInsertCache          = make(map[string]insertCache)
	authorizerOtpUpdateCacheMut       sync.RWMutex
	authorizerOtpUpdateCache          = make(map[string]updateCache)
	authorizerOtpUpsertCacheMut       sync.RWMutex
	authorizerOtpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerOtpAfterSelectHooks []AuthorizerOtpHook

var authorizerOtpBeforeInsertHooks []AuthorizerOtpHook
var authorizerOtpAfterInsertHooks []AuthorizerOtpHook

var authorizerOtpBeforeUpdateHooks []AuthorizerOtpHook
var authorizerOtpAfterUpdateHooks []AuthorizerOtpHook

var authorizerOtpBeforeDeleteHooks []AuthorizerOtpHook
var authorizerOtpAfterDeleteHooks []AuthorizerOtpHook

var authorizerOtpBeforeUpsertHooks []AuthorizerOtpHook
var authorizerOtpAfterUpsertHooks []AuthorizerOtpHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerOtp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerOtp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerOtp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerOtp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerOtp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerOtp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerOtp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerOtp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerOtp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerOtpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerOtpHook registers your hook function for all future operations.
func AddAuthorizerOtpHook(hookPoint boil.HookPoint, authorizerOtpHook AuthorizerOtpHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerOtpAfterSelectHooks = append(authorizerOtpAfterSelectHooks, authorizerOtpHook)
	case boil.BeforeInsertHook:
		authorizerOtpBeforeInsertHooks = append(authorizerOtpBeforeInsertHooks, authorizerOtpHook)
	case boil.AfterInsertHook:
		authorizerOtpAfterInsertHooks = append(authorizerOtpAfterInsertHooks, authorizerOtpHook)
	case boil.BeforeUpdateHook:
		authorizerOtpBeforeUpdateHooks = append(authorizerOtpBeforeUpdateHooks, authorizerOtpHook)
	case boil.AfterUpdateHook:
		authorizerOtpAfterUpdateHooks = append(authorizerOtpAfterUpdateHooks, authorizerOtpHook)
	case boil.BeforeDeleteHook:
		authorizerOtpBeforeDeleteHooks = append(authorizerOtpBeforeDeleteHooks, authorizerOtpHook)
	case boil.AfterDeleteHook:
		authorizerOtpAfterDeleteHooks = append(authorizerOtpAfterDeleteHooks, authorizerOtpHook)
	case boil.BeforeUpsertHook:
		authorizerOtpBeforeUpsertHooks = append(authorizerOtpBeforeUpsertHooks, authorizerOtpHook)
	case boil.AfterUpsertHook:
		authorizerOtpAfterUpsertHooks = append(authorizerOtpAfterUpsertHooks, authorizerOtpHook)
	}
}

// OneG returns a single authorizerOtp record from the query using the global executor.
func (q authorizerOtpQuery) OneG(ctx context.Context) (*AuthorizerOtp, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerOtp record from the query.
func (q authorizerOtpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerOtp, error) {
	o := &AuthorizerOtp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_otps")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerOtp records from the query using the global executor.
func (q authorizerOtpQuery) AllG(ctx context.Context) (AuthorizerOtpSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerOtp records from the query.
func (q authorizerOtpQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerOtpSlice, error) {
	var o []*AuthorizerOtp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerOtp slice")
	}

	if len(authorizerOtpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerOtp records in the query using the global executor
func (q authorizerOtpQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerOtp records in the query.
func (q authorizerOtpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_otps rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerOtpQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerOtpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_otps exists")
	}

	return count > 0, nil
}

// AuthorizerOtps retrieves all the records using an executor.
func AuthorizerOtps(mods ...qm.QueryMod) authorizerOtpQuery {
	mods = append(mods, qm.From("\"authorizer_otps\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_otps\".*"})
	}

	return authorizerOtpQuery{q}
}

// FindAuthorizerOtpG retrieves a single record by ID.
func FindAuthorizerOtpG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerOtp, error) {
	return FindAuthorizerOtp(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerOtp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerOtp(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerOtp, error) {
	authorizerOtpObj := &AuthorizerOtp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_otps\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerOtpObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_otps")
	}

	if err = authorizerOtpObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerOtpObj, err
	}

	return authorizerOtpObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerOtp) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerOtp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_otps provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerOtpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerOtpInsertCacheMut.RLock()
	cache, cached := authorizerOtpInsertCache[key]
	authorizerOtpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerOtpAllColumns,
			authorizerOtpColumnsWithDefault,
			authorizerOtpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_otps\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_otps\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_otps")
	}

	if !cached {
		authorizerOtpInsertCacheMut.Lock()
		authorizerOtpInsertCache[key] = cache
		authorizerOtpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerOtp record using the global executor.
// See Update for more documentation.
func (o *AuthorizerOtp) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerOtp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerOtp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerOtpUpdateCacheMut.RLock()
	cache, cached := authorizerOtpUpdateCache[key]
	authorizerOtpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerOtpAllColumns,
			authorizerOtpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_otps, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_otps\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerOtpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, append(wl, authorizerOtpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_otps row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_otps")
	}

	if !cached {
		authorizerOtpUpdateCacheMut.Lock()
		authorizerOtpUpdateCache[key] = cache
		authorizerOtpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerOtpQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerOtpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_otps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_otps")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerOtpSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerOtpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerOtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_otps\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerOtpPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerOtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerOtp")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerOtp) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerOtp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_otps provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerOtpColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerOtpUpsertCacheMut.RLock()
	cache, cached := authorizerOtpUpsertCache[key]
	authorizerOtpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerOtpAllColumns,
			authorizerOtpColumnsWithDefault,
			authorizerOtpColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerOtpAllColumns,
			authorizerOtpPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_otps, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerOtpPrimaryKeyColumns))
			copy(conflict, authorizerOtpPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_otps\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerOtpType, authorizerOtpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_otps")
	}

	if !cached {
		authorizerOtpUpsertCacheMut.Lock()
		authorizerOtpUpsertCache[key] = cache
		authorizerOtpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerOtp record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerOtp) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerOtp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerOtp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerOtp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerOtpPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_otps\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_otps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_otps")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerOtpQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerOtpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerOtpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_otps")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_otps")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerOtpSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerOtpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerOtpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerOtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_otps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerOtpPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerOtp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_otps")
	}

	if len(authorizerOtpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerOtp) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerOtp provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerOtp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerOtp(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerOtpSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerOtpSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerOtpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerOtpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerOtpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_otps\".* FROM \"authorizer_otps\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerOtpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerOtpSlice")
	}

	*o = slice

	return nil
}

// AuthorizerOtpExistsG checks if the AuthorizerOtp row exists.
func AuthorizerOtpExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerOtpExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerOtpExists checks if the AuthorizerOtp row exists.
func AuthorizerOtpExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_otps\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_otps exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerOtp row exists.
func (o *AuthorizerOtp) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerOtpExists(ctx, exec, o.ID)
}
