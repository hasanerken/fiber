// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthorizerWebhook is an object representing the database table.
type AuthorizerWebhook struct {
	Key              null.String `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventName        null.String `boil:"event_name" json:"event_name,omitempty" toml:"event_name" yaml:"event_name,omitempty"`
	EventDescription null.String `boil:"event_description" json:"event_description,omitempty" toml:"event_description" yaml:"event_description,omitempty"`
	EndPoint         null.String `boil:"end_point" json:"end_point,omitempty" toml:"end_point" yaml:"end_point,omitempty"`
	Headers          null.String `boil:"headers" json:"headers,omitempty" toml:"headers" yaml:"headers,omitempty"`
	Enabled          null.Bool   `boil:"enabled" json:"enabled,omitempty" toml:"enabled" yaml:"enabled,omitempty"`
	CreatedAt        null.Int64  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Int64  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *authorizerWebhookR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authorizerWebhookL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthorizerWebhookColumns = struct {
	Key              string
	ID               string
	EventName        string
	EventDescription string
	EndPoint         string
	Headers          string
	Enabled          string
	CreatedAt        string
	UpdatedAt        string
}{
	Key:              "key",
	ID:               "id",
	EventName:        "event_name",
	EventDescription: "event_description",
	EndPoint:         "end_point",
	Headers:          "headers",
	Enabled:          "enabled",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var AuthorizerWebhookTableColumns = struct {
	Key              string
	ID               string
	EventName        string
	EventDescription string
	EndPoint         string
	Headers          string
	Enabled          string
	CreatedAt        string
	UpdatedAt        string
}{
	Key:              "authorizer_webhooks.key",
	ID:               "authorizer_webhooks.id",
	EventName:        "authorizer_webhooks.event_name",
	EventDescription: "authorizer_webhooks.event_description",
	EndPoint:         "authorizer_webhooks.end_point",
	Headers:          "authorizer_webhooks.headers",
	Enabled:          "authorizer_webhooks.enabled",
	CreatedAt:        "authorizer_webhooks.created_at",
	UpdatedAt:        "authorizer_webhooks.updated_at",
}

// Generated where

var AuthorizerWebhookWhere = struct {
	Key              whereHelpernull_String
	ID               whereHelperstring
	EventName        whereHelpernull_String
	EventDescription whereHelpernull_String
	EndPoint         whereHelpernull_String
	Headers          whereHelpernull_String
	Enabled          whereHelpernull_Bool
	CreatedAt        whereHelpernull_Int64
	UpdatedAt        whereHelpernull_Int64
}{
	Key:              whereHelpernull_String{field: "\"authorizer_webhooks\".\"key\""},
	ID:               whereHelperstring{field: "\"authorizer_webhooks\".\"id\""},
	EventName:        whereHelpernull_String{field: "\"authorizer_webhooks\".\"event_name\""},
	EventDescription: whereHelpernull_String{field: "\"authorizer_webhooks\".\"event_description\""},
	EndPoint:         whereHelpernull_String{field: "\"authorizer_webhooks\".\"end_point\""},
	Headers:          whereHelpernull_String{field: "\"authorizer_webhooks\".\"headers\""},
	Enabled:          whereHelpernull_Bool{field: "\"authorizer_webhooks\".\"enabled\""},
	CreatedAt:        whereHelpernull_Int64{field: "\"authorizer_webhooks\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Int64{field: "\"authorizer_webhooks\".\"updated_at\""},
}

// AuthorizerWebhookRels is where relationship names are stored.
var AuthorizerWebhookRels = struct {
}{}

// authorizerWebhookR is where relationships are stored.
type authorizerWebhookR struct {
}

// NewStruct creates a new relationship struct
func (*authorizerWebhookR) NewStruct() *authorizerWebhookR {
	return &authorizerWebhookR{}
}

// authorizerWebhookL is where Load methods for each relationship are stored.
type authorizerWebhookL struct{}

var (
	authorizerWebhookAllColumns            = []string{"key", "id", "event_name", "event_description", "end_point", "headers", "enabled", "created_at", "updated_at"}
	authorizerWebhookColumnsWithoutDefault = []string{"id"}
	authorizerWebhookColumnsWithDefault    = []string{"key", "event_name", "event_description", "end_point", "headers", "enabled", "created_at", "updated_at"}
	authorizerWebhookPrimaryKeyColumns     = []string{"id"}
	authorizerWebhookGeneratedColumns      = []string{}
)

type (
	// AuthorizerWebhookSlice is an alias for a slice of pointers to AuthorizerWebhook.
	// This should almost always be used instead of []AuthorizerWebhook.
	AuthorizerWebhookSlice []*AuthorizerWebhook
	// AuthorizerWebhookHook is the signature for custom AuthorizerWebhook hook methods
	AuthorizerWebhookHook func(context.Context, boil.ContextExecutor, *AuthorizerWebhook) error

	authorizerWebhookQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizerWebhookType                 = reflect.TypeOf(&AuthorizerWebhook{})
	authorizerWebhookMapping              = queries.MakeStructMapping(authorizerWebhookType)
	authorizerWebhookPrimaryKeyMapping, _ = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, authorizerWebhookPrimaryKeyColumns)
	authorizerWebhookInsertCacheMut       sync.RWMutex
	authorizerWebhookInsertCache          = make(map[string]insertCache)
	authorizerWebhookUpdateCacheMut       sync.RWMutex
	authorizerWebhookUpdateCache          = make(map[string]updateCache)
	authorizerWebhookUpsertCacheMut       sync.RWMutex
	authorizerWebhookUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authorizerWebhookAfterSelectHooks []AuthorizerWebhookHook

var authorizerWebhookBeforeInsertHooks []AuthorizerWebhookHook
var authorizerWebhookAfterInsertHooks []AuthorizerWebhookHook

var authorizerWebhookBeforeUpdateHooks []AuthorizerWebhookHook
var authorizerWebhookAfterUpdateHooks []AuthorizerWebhookHook

var authorizerWebhookBeforeDeleteHooks []AuthorizerWebhookHook
var authorizerWebhookAfterDeleteHooks []AuthorizerWebhookHook

var authorizerWebhookBeforeUpsertHooks []AuthorizerWebhookHook
var authorizerWebhookAfterUpsertHooks []AuthorizerWebhookHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizerWebhook) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizerWebhook) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizerWebhook) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizerWebhook) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizerWebhook) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizerWebhook) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizerWebhook) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizerWebhook) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizerWebhook) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authorizerWebhookAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizerWebhookHook registers your hook function for all future operations.
func AddAuthorizerWebhookHook(hookPoint boil.HookPoint, authorizerWebhookHook AuthorizerWebhookHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authorizerWebhookAfterSelectHooks = append(authorizerWebhookAfterSelectHooks, authorizerWebhookHook)
	case boil.BeforeInsertHook:
		authorizerWebhookBeforeInsertHooks = append(authorizerWebhookBeforeInsertHooks, authorizerWebhookHook)
	case boil.AfterInsertHook:
		authorizerWebhookAfterInsertHooks = append(authorizerWebhookAfterInsertHooks, authorizerWebhookHook)
	case boil.BeforeUpdateHook:
		authorizerWebhookBeforeUpdateHooks = append(authorizerWebhookBeforeUpdateHooks, authorizerWebhookHook)
	case boil.AfterUpdateHook:
		authorizerWebhookAfterUpdateHooks = append(authorizerWebhookAfterUpdateHooks, authorizerWebhookHook)
	case boil.BeforeDeleteHook:
		authorizerWebhookBeforeDeleteHooks = append(authorizerWebhookBeforeDeleteHooks, authorizerWebhookHook)
	case boil.AfterDeleteHook:
		authorizerWebhookAfterDeleteHooks = append(authorizerWebhookAfterDeleteHooks, authorizerWebhookHook)
	case boil.BeforeUpsertHook:
		authorizerWebhookBeforeUpsertHooks = append(authorizerWebhookBeforeUpsertHooks, authorizerWebhookHook)
	case boil.AfterUpsertHook:
		authorizerWebhookAfterUpsertHooks = append(authorizerWebhookAfterUpsertHooks, authorizerWebhookHook)
	}
}

// OneG returns a single authorizerWebhook record from the query using the global executor.
func (q authorizerWebhookQuery) OneG(ctx context.Context) (*AuthorizerWebhook, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single authorizerWebhook record from the query.
func (q authorizerWebhookQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthorizerWebhook, error) {
	o := &AuthorizerWebhook{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for authorizer_webhooks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuthorizerWebhook records from the query using the global executor.
func (q authorizerWebhookQuery) AllG(ctx context.Context) (AuthorizerWebhookSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuthorizerWebhook records from the query.
func (q authorizerWebhookQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthorizerWebhookSlice, error) {
	var o []*AuthorizerWebhook

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthorizerWebhook slice")
	}

	if len(authorizerWebhookAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuthorizerWebhook records in the query using the global executor
func (q authorizerWebhookQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuthorizerWebhook records in the query.
func (q authorizerWebhookQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count authorizer_webhooks rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q authorizerWebhookQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q authorizerWebhookQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if authorizer_webhooks exists")
	}

	return count > 0, nil
}

// AuthorizerWebhooks retrieves all the records using an executor.
func AuthorizerWebhooks(mods ...qm.QueryMod) authorizerWebhookQuery {
	mods = append(mods, qm.From("\"authorizer_webhooks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"authorizer_webhooks\".*"})
	}

	return authorizerWebhookQuery{q}
}

// FindAuthorizerWebhookG retrieves a single record by ID.
func FindAuthorizerWebhookG(ctx context.Context, iD string, selectCols ...string) (*AuthorizerWebhook, error) {
	return FindAuthorizerWebhook(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuthorizerWebhook retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthorizerWebhook(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AuthorizerWebhook, error) {
	authorizerWebhookObj := &AuthorizerWebhook{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"authorizer_webhooks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authorizerWebhookObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from authorizer_webhooks")
	}

	if err = authorizerWebhookObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authorizerWebhookObj, err
	}

	return authorizerWebhookObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizerWebhook) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthorizerWebhook) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_webhooks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerWebhookColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authorizerWebhookInsertCacheMut.RLock()
	cache, cached := authorizerWebhookInsertCache[key]
	authorizerWebhookInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authorizerWebhookAllColumns,
			authorizerWebhookColumnsWithDefault,
			authorizerWebhookColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorizer_webhooks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorizer_webhooks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into authorizer_webhooks")
	}

	if !cached {
		authorizerWebhookInsertCacheMut.Lock()
		authorizerWebhookInsertCache[key] = cache
		authorizerWebhookInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuthorizerWebhook record using the global executor.
// See Update for more documentation.
func (o *AuthorizerWebhook) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuthorizerWebhook.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthorizerWebhook) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authorizerWebhookUpdateCacheMut.RLock()
	cache, cached := authorizerWebhookUpdateCache[key]
	authorizerWebhookUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authorizerWebhookAllColumns,
			authorizerWebhookPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update authorizer_webhooks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"authorizer_webhooks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authorizerWebhookPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, append(wl, authorizerWebhookPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update authorizer_webhooks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for authorizer_webhooks")
	}

	if !cached {
		authorizerWebhookUpdateCacheMut.Lock()
		authorizerWebhookUpdateCache[key] = cache
		authorizerWebhookUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q authorizerWebhookQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q authorizerWebhookQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for authorizer_webhooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for authorizer_webhooks")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuthorizerWebhookSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthorizerWebhookSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"authorizer_webhooks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authorizerWebhookPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authorizerWebhook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authorizerWebhook")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuthorizerWebhook) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthorizerWebhook) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no authorizer_webhooks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizerWebhookColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authorizerWebhookUpsertCacheMut.RLock()
	cache, cached := authorizerWebhookUpsertCache[key]
	authorizerWebhookUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authorizerWebhookAllColumns,
			authorizerWebhookColumnsWithDefault,
			authorizerWebhookColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authorizerWebhookAllColumns,
			authorizerWebhookPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert authorizer_webhooks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authorizerWebhookPrimaryKeyColumns))
			copy(conflict, authorizerWebhookPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"authorizer_webhooks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authorizerWebhookType, authorizerWebhookMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert authorizer_webhooks")
	}

	if !cached {
		authorizerWebhookUpsertCacheMut.Lock()
		authorizerWebhookUpsertCache[key] = cache
		authorizerWebhookUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuthorizerWebhook record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuthorizerWebhook) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuthorizerWebhook record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthorizerWebhook) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthorizerWebhook provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authorizerWebhookPrimaryKeyMapping)
	sql := "DELETE FROM \"authorizer_webhooks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from authorizer_webhooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for authorizer_webhooks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q authorizerWebhookQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q authorizerWebhookQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authorizerWebhookQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizer_webhooks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_webhooks")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuthorizerWebhookSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthorizerWebhookSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authorizerWebhookBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"authorizer_webhooks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerWebhookPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authorizerWebhook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for authorizer_webhooks")
	}

	if len(authorizerWebhookAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuthorizerWebhook) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuthorizerWebhook provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthorizerWebhook) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthorizerWebhook(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerWebhookSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuthorizerWebhookSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthorizerWebhookSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthorizerWebhookSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authorizerWebhookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"authorizer_webhooks\".* FROM \"authorizer_webhooks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authorizerWebhookPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthorizerWebhookSlice")
	}

	*o = slice

	return nil
}

// AuthorizerWebhookExistsG checks if the AuthorizerWebhook row exists.
func AuthorizerWebhookExistsG(ctx context.Context, iD string) (bool, error) {
	return AuthorizerWebhookExists(ctx, boil.GetContextDB(), iD)
}

// AuthorizerWebhookExists checks if the AuthorizerWebhook row exists.
func AuthorizerWebhookExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"authorizer_webhooks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if authorizer_webhooks exists")
	}

	return exists, nil
}

// Exists checks if the AuthorizerWebhook row exists.
func (o *AuthorizerWebhook) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthorizerWebhookExists(ctx, exec, o.ID)
}
